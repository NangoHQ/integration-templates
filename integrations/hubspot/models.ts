// ---------------------------
// This file was generated by Nango (v0.58.3)
// It's recommended to version this file
// https://nango.dev
// ---------------------------

// ------ Models
export interface IdEntity {
    id: string;
}

export interface SuccessResponse {
    success: boolean;
}

export interface Id {
    id: string;
}

export interface Timestamps {
    updatedAt: string;
    createdAt: string;
}

export interface OptionalObjectType {
    objectType?: string;
}

export interface InputProperty {
    name: string;
}

export interface Option {
    label: string;
    value: string;
    displayOrder: number;
    hidden: boolean;
}

export interface Property {
    [key: string]: any;
    createdAt?: string;
    updatedAt?: string;
    name: string;
    label: string;
    type: string;
    fieldType: string;
    description: string;
    groupName: string;
    options?: any[];
    displayOrder: number;
    calculated: boolean;
    externalOptions: boolean;
    hasUniqueValue: boolean;
    hidden: boolean;
    hubspotDefined?: boolean;
    showCurrencySymbol?: boolean;
    modificationMetadata?: { archivable?: boolean; readOnlyDefinition?: boolean; readOnlyValue?: boolean; readOnlyOptions?: boolean };
    formField: boolean;
    dataSensitivity: string;
}

export interface PropertyResponse {
    results: Property[];
}

export interface CustomPropertyOption {
    hidden: boolean;
    displayOrder?: number;
    description?: string;
    label: string;
    value: string;
}

export interface CustomProperty {
    hidden?: boolean;
    displayOrder?: number;
    description?: string;
    label: string;
    type: string;
    formField?: boolean;
    groupName: string;
    referencedObjectType?: string;
    name: string;
    options?: CustomPropertyOption[];
    calculationFormula?: string;
    hasUniqueValue?: boolean;
    fieldType: string;
    externalOptions?: boolean;
}

export interface CreatePropertyInput {
    objectType: string;
    data: CustomProperty;
}

export interface CreatedProperty {
    createdUserId: string;
    hidden: boolean;
    modificationMetadata: { readOnlyOptions?: boolean; readOnlyValue: boolean; readOnlyDefinition: boolean; archivable: boolean };
    displayOrder: number;
    description: string;
    showCurrencySymbol?: boolean;
    label: string;
    type: string;
    hubspotDefined?: boolean;
    formField: boolean;
    dataSensitivity?: string;
    createdAt: string;
    archivedAt?: string;
    archived: boolean;
    groupName: string;
    referencedObjectType?: string;
    name: string;
    options: { hidden: boolean; displayOrder: number; description: string; label: string; value: string }[];
    calculationFormula?: string;
    hasUniqueValue: boolean;
    fieldType: string;
    updatedUserId: string;
    calculated: boolean;
    externalOptions: boolean;
    updatedAt: string;
}

export interface Role {
    requiresBillingWrite: boolean;
    name: string;
    id: string;
}

export interface RoleResponse {
    results: Role[];
}

export interface UserRoleInput {
    id: string;
    firstName?: string;
    lastName?: string;
    primaryTeamId?: string;
}

export interface CreatedUser {
    id: string;
    firstName: string;
    lastName: string;
    primaryTeamId?: string;
    email: string;
    sendWelcomeEmail: boolean;
    roleIds: string[];
    secondaryTeamIds: string[];
    superAdmin: boolean;
}

export interface ChangedRoleResponse {
    id: string;
    firstName?: string;
    lastName?: string;
    primaryTeamId?: string;
    email: string;
    sendWelcomeEmail?: boolean;
    roleIds: string[];
    secondaryTeamIds?: string[];
    superAdmin: boolean;
}

export interface HubspotServiceTicket {
    id: number;
    createdAt: Date;
    updatedAt: Date;
    isArchived: boolean;
    subject: string;
    content: string;
    objectId: number;
    ownerId: number;
    pipeline: number;
    pipelineStage: number;
    ticketCategory: string | null;
    ticketPriority: string;
}

export interface HubspotOwner {
    id: number;
    email: string;
    firstName: string;
    lastName: string;
    userId: number;
    createdAt: Date;
    updatedAt: Date;
    archived: boolean;
}

export interface User {
    id: string;
    email: string;
    firstName: string;
    lastName: string;
    roleIds: string[];
    primaryTeamId?: string | undefined;
    superAdmin: boolean;
}

export interface CreateUser {
    firstName?: string;
    lastName?: string;
    primaryTeamId?: string;
    email: string;
    sendWelcomeEmail?: boolean;
    roleId?: string;
    secondaryTeamIds?: string[];
}

export interface UserInformation {
    id: number;
    email: string;
}

export interface HubspotKnowledgeBase {
    id: string;
    title: string;
    description: string;
    category: string;
    content: string;
    publishDate: number;
}

export interface CreateContactInput {
    first_name?: string | undefined;
    last_name?: string | undefined;
    email?: string | undefined;
    job_title?: string | undefined;
    lead_status?: string | undefined;
    lifecycle_stage?: string | undefined;
    salutation?: string | undefined;
    mobile_phone_number?: string | undefined;
    website_url?: string | undefined;
    owner?: string | undefined;
}

export interface CreateUpdateContactOutput {
    id: string;
    created_date: string;
    first_name?: string | undefined;
    last_name?: string | undefined;
    email?: string | undefined;
    job_title?: string | undefined;
    last_contacted?: string | undefined;
    last_activity_date?: string | undefined;
    lead_status?: string | undefined;
    lifecycle_stage?: string | undefined;
    salutation?: string | undefined;
    mobile_phone_number?: string | undefined;
    website_url?: string | undefined;
    owner?: string | undefined;
}

export interface UpdateContactInput {
    first_name?: string | undefined;
    last_name?: string | undefined;
    email?: string | undefined;
    job_title?: string | undefined;
    lead_status?: string | undefined;
    lifecycle_stage?: string | undefined;
    salutation?: string | undefined;
    mobile_phone_number?: string | undefined;
    website_url?: string | undefined;
    owner?: string | undefined;
    id: string;
}

export interface Contact {
    id: string;
    created_date: string;
    first_name: string | null;
    last_name: string | null;
    email: string | null;
    job_title: string | null;
    last_contacted: string | null;
    last_activity_date: string | null;
    lead_status: string | null;
    lifecycle_stage: string | null;
    salutation: string | null;
    mobile_phone_number: string | null;
    website_url: string | null;
    owner: string | null;
}

export interface CurrencyCode {
    id: string;
    code: string;
    description: string;
}

export interface CreateCompanyInput {
    name?: string | undefined;
    industry?: string | undefined;
    description?: string | undefined;
    country?: string | undefined;
    city?: string | undefined;
    lead_status?: string | undefined;
    lifecycle_stage?: string | undefined;
    owner?: string | undefined;
    year_founded?: string | undefined;
    website_url?: string | undefined;
}

export interface UpdateCompanyInput {
    id: string;
    name?: string | undefined;
    industry?: string | undefined;
    description?: string | undefined;
    country?: string | undefined;
    city?: string | undefined;
    lead_status?: string | undefined;
    lifecycle_stage?: string | undefined;
    owner?: string | undefined;
    year_founded?: string | undefined;
    website_url?: string | undefined;
}

export interface CreateUpdateCompanyOutput {
    id: string;
    created_date: string;
    name?: string | undefined;
    industry?: string | undefined;
    description?: string | undefined;
    country?: string | undefined;
    city?: string | undefined;
    lead_status?: string | undefined;
    lifecycle_stage?: string | undefined;
    owner?: string | undefined;
    year_founded?: string | undefined;
    website_url?: string | undefined;
}

export interface Company {
    id: string;
    created_date: string | null;
    name: string | null;
    industry: string | null;
    description: string | null;
    country: string | null;
    city: string | null;
    lead_status: string | null;
    lifecycle_stage: string | null;
    owner: string | null;
    year_founded: string | null;
    website_url: string | null;
}

export interface Account {
    id: string;
    type: string;
    timeZone: string;
    companyCurrency: string;
    additionalCurrencies: string[];
    utcOffset: string;
    utcOffsetMilliseconds: number;
    uiDomain: string;
    dataHostingLocation: string;
}

export interface AssociationTypes {
    association_category: string;
    association_type_Id: number;
}

export interface Association {
    to: number;
    types: AssociationTypes[];
}

export interface CreateTaskInput {
    task_type?: string | undefined;
    title?: string | undefined;
    priority?: string | undefined;
    assigned_to?: string | undefined;
    due_date?: string | undefined;
    notes?: string | undefined;
    associations?: Association[] | undefined;
}

export interface UpdateTaskInput {
    id: string;
    task_type?: string | undefined;
    title?: string | undefined;
    priority?: string | undefined;
    assigned_to?: string | undefined;
    due_date?: string | undefined;
    notes?: string | undefined;
    associations?: Association[] | undefined;
}

export interface CreateUpdateTaskOutput {
    id: string;
    task_type?: string | undefined;
    title?: string | undefined;
    priority?: string | undefined;
    assigned_to?: string | undefined;
    due_date?: string | undefined;
    notes?: string | undefined;
    associations?: Association[] | undefined;
}

export interface AssociationCompany {
    id: string;
    name: string | null;
}

export interface AssociationContact {
    id: string;
    first_name: string | null;
    last_name: string | null;
}

export interface AssociationDeal {
    id: string;
    name: string | null;
}

export interface ReturnedAssociations {
    companies?: AssociationCompany[] | undefined;
    contacts?: AssociationContact[] | undefined;
    deals?: AssociationDeal[] | undefined;
}

export interface Task {
    id: string;
    task_type: string | null;
    title: string | null;
    priority: string | null;
    assigned_to: string | null;
    due_date: string | null;
    notes: string | null;
    returned_associations?: ReturnedAssociations | undefined;
}

export interface CreateDealInput {
    name?: string | undefined;
    amount?: string | undefined;
    close_date?: string | undefined;
    deal_description?: string | undefined;
    owner?: string | undefined;
    deal_stage?: string | undefined;
    deal_probability?: string | undefined;
    associations?: Association[] | undefined;
}

export interface UpdateDealInput {
    id: string;
    name?: string | undefined;
    amount?: string | undefined;
    close_date?: string | undefined;
    deal_description?: string | undefined;
    owner?: string | undefined;
    deal_stage?: string | undefined;
    deal_probability?: string | undefined;
    associations?: Association[] | undefined;
}

export interface CreateUpdateDealOutput {
    id: string;
    name?: string | undefined;
    amount?: string | undefined;
    close_date?: string | undefined;
    deal_description?: string | undefined;
    owner?: string | undefined;
    deal_stage?: string | undefined;
    deal_probability?: string | undefined;
}

export interface Deal {
    id: string;
    name: string | null;
    amount: string | null;
    close_date: string | null;
    deal_description: string | null;
    owner: string | null;
    deal_stage: string | null;
    deal_probability: string | null;
    returned_associations?: ReturnedAssociations | undefined;
}

export interface Note {
    id?: string | undefined;
    time_stamp: string;
    created_date?: string | undefined;
    body?: string | undefined;
    attachment_ids?: string | undefined;
    owner?: string | undefined;
    associations?: Association[] | undefined;
}

export interface LineItemDefaultProperties {
    name: string;
    price: string;
    quantity: string;
    recurringbillingfrequency: null | number;
    tax: null | number;
    amount: string;
    createdate: string;
    description: string;
    discount: null | number;
}

export interface LineItem {
    [key: string]: any;
    name: string;
    price: string;
    quantity: string;
    recurringbillingfrequency: null | number;
    tax: null | number;
    amount: string;
    createdate: string;
    description: string;
    discount: null | number;
    id: string;
}

export interface CustomObject {
    [key: string]: any;
    id: string;
}

export interface Product {
    updatedAt: string;
    createdAt: string;
    id: string;
    amount: number | null;
    description: string | null;
    discount: number | null;
    sku: string | null;
    url: string | null;
    name: string;
    price: string;
    quantity: number | null;
    recurringBillingFrequency: number | null;
    tax: null | number;
}

export interface Stage {
    updatedAt: string;
    createdAt: string;
    label: string;
    displayOrder: number;
    metadata: { isClosed: boolean; probability: string };
    id: string;
    archived: boolean;
    writePermissions: string;
}

export interface Pipeline {
    updatedAt: string;
    createdAt: string;
    label: string;
    displayOrder: number;
    id: string;
    archived: boolean;
    stages: Stage[];
}

export interface PipelineOutput {
    pipelines: Pipeline[];
}
// ------ /Models

// ------ SDK

import type { Nango } from '@nangohq/node';
import type { AxiosInstance, AxiosInterceptorManager, AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';
import type { ApiEndUser, DBSyncConfig, DBTeam, GetPublicIntegration, HTTP_METHOD, RunnerFlags } from '@nangohq/types';
import type { ZodSchema, SafeParseSuccess } from 'zod';

export declare const oldLevelToNewLevel: {
    readonly debug: 'debug';
    readonly info: 'info';
    readonly warn: 'warn';
    readonly error: 'error';
    readonly verbose: 'debug';
    readonly silly: 'debug';
    readonly http: 'info';
};
type LogLevel = 'info' | 'debug' | 'error' | 'warn' | 'http' | 'verbose' | 'silly';
interface Pagination {
    type: string;
    limit?: number;
    response_path?: string;
    limit_name_in_request: string;
    in_body?: boolean;
    on_page?: (paginationState: { nextPageParam?: string | number | undefined; response: AxiosResponse }) => Promise<void>;
}
interface CursorPagination extends Pagination {
    cursor_path_in_response: string;
    cursor_name_in_request: string;
}
interface LinkPagination extends Pagination {
    link_rel_in_response_header?: string;
    link_path_in_response_body?: string;
}
interface OffsetPagination extends Pagination {
    offset_name_in_request: string;
    offset_start_value?: number;
    offset_calculation_method?: 'per-page' | 'by-response-size';
}
interface RetryHeaderConfig {
    at?: string;
    after?: string;
}
export interface ProxyConfiguration {
    endpoint: string;
    providerConfigKey?: string;
    connectionId?: string;
    method?: 'GET' | 'POST' | 'PATCH' | 'PUT' | 'DELETE' | 'get' | 'post' | 'patch' | 'put' | 'delete';
    headers?: Record<string, string>;
    params?: string | Record<string, string | number>;
    data?: unknown;
    retries?: number;
    baseUrlOverride?: string;
    paginate?: Partial<CursorPagination> | Partial<LinkPagination> | Partial<OffsetPagination>;
    retryHeader?: RetryHeaderConfig;
    responseType?: 'arraybuffer' | 'blob' | 'document' | 'json' | 'text' | 'stream' | undefined;
    retryOn?: number[] | null;
}
export interface AuthModes {
    OAuth1: 'OAUTH1';
    OAuth2: 'OAUTH2';
    OAuth2CC: 'OAUTH2_CC';
    Basic: 'BASIC';
    ApiKey: 'API_KEY';
    AppStore: 'APP_STORE';
    Custom: 'CUSTOM';
    App: 'APP';
    None: 'NONE';
    TBA: 'TBA';
    Tableau: 'TABLEAU';
    Jwt: 'JWT';
    Bill: 'BILL';
    TwoStep: 'TWO_STEP';
    Signature: 'SIGNATURE';
}
export type AuthModeType = AuthModes[keyof AuthModes];
interface OAuth1Token {
    oAuthToken: string;
    oAuthTokenSecret: string;
}
interface AppCredentials {
    type: AuthModes['App'];
    access_token: string;
    expires_at?: Date | undefined;
    raw: Record<string, any>;
}
interface AppStoreCredentials {
    type?: AuthModes['AppStore'];
    access_token: string;
    expires_at?: Date | undefined;
    raw: Record<string, any>;
    private_key: string;
}
interface BasicApiCredentials {
    type: AuthModes['Basic'];
    username: string;
    password: string;
}
interface ApiKeyCredentials {
    type: AuthModes['ApiKey'];
    apiKey: string;
}
interface CredentialsCommon<T = Record<string, any>> {
    type: AuthModeType;
    raw: T;
}
interface OAuth2Credentials extends CredentialsCommon {
    type: AuthModes['OAuth2'];
    access_token: string;
    refresh_token?: string;
    expires_at?: Date | undefined;
}
interface OAuth2ClientCredentials extends CredentialsCommon {
    type: AuthModes['OAuth2CC'];
    token: string;
    expires_at?: Date | undefined;
    client_id: string;
    client_secret: string;
}
interface OAuth1Credentials extends CredentialsCommon {
    type: AuthModes['OAuth1'];
    oauth_token: string;
    oauth_token_secret: string;
}
interface TbaCredentials {
    type: AuthModes['TBA'];
    token_id: string;
    token_secret: string;
    config_override: {
        client_id?: string;
        client_secret?: string;
    };
}
interface TableauCredentials extends CredentialsCommon {
    type: AuthModes['Tableau'];
    pat_name: string;
    pat_secret: string;
    content_url?: string;
    token?: string;
    expires_at?: Date | undefined;
}
interface JwtCredentials {
    type: AuthModes['Jwt'];
    privateKeyId?: string;
    issuerId?: string;
    privateKey:
        | {
              id: string;
              secret: string;
          }
        | string;
    token?: string;
    expires_at?: Date | undefined;
}
interface BillCredentials extends CredentialsCommon {
    type: AuthModes['Bill'];
    username: string;
    password: string;
    organization_id: string;
    dev_key: string;
    session_id?: string;
    user_id?: string;
    expires_at?: Date | undefined;
}
interface TwoStepCredentials extends CredentialsCommon {
    type: AuthModes['TwoStep'];
    [key: string]: any;
    token?: string;
    expires_at?: Date | undefined;
}
interface SignatureCredentials {
    type: AuthModes['Signature'];
    username: string;
    password: string;
    token?: string;
    expires_at?: Date | undefined;
}
interface CustomCredentials extends CredentialsCommon {
    type: AuthModes['Custom'];
}
type UnauthCredentials = Record<string, never>;
type AuthCredentials =
    | OAuth2Credentials
    | OAuth2ClientCredentials
    | OAuth1Credentials
    | BasicApiCredentials
    | ApiKeyCredentials
    | AppCredentials
    | AppStoreCredentials
    | UnauthCredentials
    | TbaCredentials
    | TableauCredentials
    | JwtCredentials
    | BillCredentials
    | TwoStepCredentials
    | SignatureCredentials
    | CustomCredentials;
type Metadata = Record<string, unknown>;
interface MetadataChangeResponse {
    metadata: Metadata;
    provider_config_key: string;
    connection_id: string | string[];
}
interface Connection {
    id: number;
    provider_config_key: string;
    connection_id: string;
    connection_config: Record<string, string>;
    created_at: string;
    updated_at: string;
    last_fetched_at: string;
    metadata: Record<string, unknown> | null;
    provider: string;
    errors: {
        type: string;
        log_id: string;
    }[];
    end_user: ApiEndUser | null;
    credentials: AuthCredentials;
}
export declare class ActionError<T = Record<string, unknown>> extends Error {
    type: string;
    payload?: Record<string, unknown>;
    constructor(payload?: T);
}
export interface NangoProps {
    scriptType: 'sync' | 'action' | 'webhook' | 'on-event';
    host?: string;
    secretKey: string;
    team?: Pick<DBTeam, 'id' | 'name'>;
    connectionId: string;
    environmentId: number;
    environmentName?: string;
    activityLogId?: string | undefined;
    providerConfigKey: string;
    provider: string;
    lastSyncDate?: Date;
    syncId?: string | undefined;
    nangoConnectionId?: number;
    syncJobId?: number | undefined;
    dryRun?: boolean;
    track_deletes?: boolean;
    attributes?: object | undefined;
    logMessages?:
        | {
              counts: {
                  updated: number;
                  added: number;
                  deleted: number;
              };
              messages: unknown[];
          }
        | undefined;
    rawSaveOutput?: Map<string, unknown[]> | undefined;
    rawDeleteOutput?: Map<string, unknown[]> | undefined;
    stubbedMetadata?: Metadata | undefined;
    abortSignal?: AbortSignal;
    syncConfig: DBSyncConfig;
    runnerFlags: RunnerFlags;
    debug: boolean;
    startedAt: Date;
    endUser: {
        id: number;
        endUserId: string | null;
        orgId: string | null;
    } | null;
    axios?: {
        request?: AxiosInterceptorManager<AxiosRequestConfig>;
        response?: {
            onFulfilled: (value: AxiosResponse) => AxiosResponse | Promise<AxiosResponse>;
            onRejected: (value: unknown) => AxiosError | Promise<AxiosError>;
        };
    };
}
export interface EnvironmentVariable {
    name: string;
    value: string;
}
export declare const defaultPersistApi: AxiosInstance;
export declare class NangoAction {
    protected nango: Nango;
    private attributes;
    protected persistApi: AxiosInstance;
    activityLogId?: string | undefined;
    syncId?: string;
    nangoConnectionId?: number;
    environmentId: number;
    environmentName?: string;
    syncJobId?: number;
    dryRun?: boolean;
    abortSignal?: AbortSignal;
    syncConfig?: DBSyncConfig;
    runnerFlags: RunnerFlags;
    connectionId: string;
    providerConfigKey: string;
    provider?: string;
    ActionError: typeof ActionError;
    private memoizedConnections;
    private memoizedIntegration;
    constructor(
        config: NangoProps,
        {
            persistApi
        }?: {
            persistApi: AxiosInstance;
        }
    );
    protected stringify(): string;
    private proxyConfig;
    protected throwIfAborted(): void;
    proxy<T = any>(config: ProxyConfiguration): Promise<AxiosResponse<T>>;
    get<T = any>(config: Omit<ProxyConfiguration, 'method'>): Promise<AxiosResponse<T>>;
    post<T = any>(config: Omit<ProxyConfiguration, 'method'>): Promise<AxiosResponse<T>>;
    put<T = any>(config: Omit<ProxyConfiguration, 'method'>): Promise<AxiosResponse<T>>;
    patch<T = any>(config: Omit<ProxyConfiguration, 'method'>): Promise<AxiosResponse<T>>;
    delete<T = any>(config: Omit<ProxyConfiguration, 'method'>): Promise<AxiosResponse<T>>;
    getToken(): Promise<
        | string
        | OAuth1Token
        | OAuth2ClientCredentials
        | BasicApiCredentials
        | ApiKeyCredentials
        | AppCredentials
        | AppStoreCredentials
        | UnauthCredentials
        | CustomCredentials
        | TbaCredentials
        | TableauCredentials
        | JwtCredentials
        | BillCredentials
        | TwoStepCredentials
        | SignatureCredentials
    >;
    /**
     * Get current integration
     */
    getIntegration(queries?: GetPublicIntegration['Querystring']): Promise<GetPublicIntegration['Success']['data']>;
    getConnection(providerConfigKeyOverride?: string, connectionIdOverride?: string): Promise<Connection>;
    setMetadata(metadata: Metadata): Promise<AxiosResponse<MetadataChangeResponse>>;
    updateMetadata(metadata: Metadata): Promise<AxiosResponse<MetadataChangeResponse>>;
    /**
     * @deprecated please use setMetadata instead.
     */
    setFieldMapping(fieldMapping: Record<string, string>): Promise<AxiosResponse<object>>;
    getMetadata<T = Metadata>(): Promise<T>;
    getWebhookURL(): Promise<string | null | undefined>;
    /**
     * @deprecated please use getMetadata instead.
     */
    getFieldMapping(): Promise<Metadata>;
    /**
     * Log
     * @desc Log a message to the activity log which shows up in the Nango Dashboard
     * note that the last argument can be an object with a level property to specify the log level
     * @example
     * ```ts
     * await nango.log('This is a log message', { level: 'error' })
     * ```
     */
    log(
        message: any,
        options?:
            | {
                  level?: LogLevel;
              }
            | {
                  [key: string]: any;
                  level?: never;
              }
    ): Promise<void>;
    log(
        message: string,
        ...args: [
            any,
            {
                level?: LogLevel;
            }
        ]
    ): Promise<void>;
    getEnvironmentVariables(): Promise<EnvironmentVariable[] | null>;
    getFlowAttributes<A = object>(): A | null;
    paginate<T = any>(config: ProxyConfiguration): AsyncGenerator<T[], undefined, void>;
    triggerAction<In = unknown, Out = object>(providerConfigKey: string, connectionId: string, actionName: string, input?: In): Promise<Out>;
    zodValidateInput<T = any, Z = any>({ zodSchema, input }: { zodSchema: ZodSchema<Z>; input: T }): Promise<SafeParseSuccess<Z>>;
    triggerSync(providerConfigKey: string, connectionId: string, syncName: string, fullResync?: boolean): Promise<void | string>;
    startSync(providerConfigKey: string, syncs: (string | { name: string; variant: string })[], connectionId?: string): Promise<void>;
    /**
     * Uncontrolled fetch is a regular fetch without retry or credentials injection.
     * Only use that method when you want to access resources that are unrelated to the current connection/provider.
     */
    uncontrolledFetch(options: { url: URL; method?: HTTP_METHOD; headers?: Record<string, string> | undefined; body?: string | null }): Promise<Response>;
    private sendLogToPersist;
    private logAPICall;
}
export declare class NangoSync extends NangoAction {
    variant: string;
    lastSyncDate?: Date;
    track_deletes: boolean;
    logMessages?:
        | {
              counts: {
                  updated: number;
                  added: number;
                  deleted: number;
              };
              messages: unknown[];
          }
        | undefined;
    rawSaveOutput?: Map<string, unknown[]>;
    rawDeleteOutput?: Map<string, unknown[]>;
    stubbedMetadata?: Metadata | undefined;
    private batchSize;
    constructor(config: NangoProps);
    /**
     * @deprecated please use batchSave
     */
    batchSend<T extends object>(results: T[], model: string): Promise<boolean | null>;
    batchSave<T extends object>(results: T[], model: string): Promise<boolean | null>;
    batchDelete<T extends object>(results: T[], model: string): Promise<boolean | null>;
    batchUpdate<T extends object>(results: T[], model: string): Promise<boolean | null>;
    getMetadata<T = Metadata>(): Promise<T>;
    setMergingStrategy(merging: { strategy: 'ignore_if_modified_after' | 'override' }, model: string): Promise<void>;
    getRecordsByIds<K = string | number, T = any>(ids: K[], model: string): Promise<Map<K, T>>;
}
/**
 * @internal
 *
 * This function will enable tracing on the SDK
 * It has been split from the actual code to avoid making the code too dirty and to easily enable/disable tracing if there is an issue with it
 */
export declare function instrumentSDK(rawNango: NangoAction | NangoSync): NangoAction | NangoSync;
export {};

// ------ /SDK

// ------ Flows
export const NangoFlows = [
    {
        providerConfigKey: 'hubspot',
        syncs: [
            {
                name: 'service-tickets',
                type: 'sync',
                description: 'Fetches a list of service tickets from Hubspot',
                sync_type: 'incremental',
                usedModels: ['HubspotServiceTicket'],
                runs: 'every half hour',
                version: '1.0.0',
                track_deletes: false,
                auto_start: true,
                input: null,
                output: ['HubspotServiceTicket'],
                scopes: [],
                endpoints: [
                    {
                        method: 'GET',
                        path: '/service-tickets'
                    }
                ],
                webhookSubscriptions: []
            },
            {
                name: 'contacts',
                type: 'sync',
                description: 'Fetches a list of contacts from Hubspot',
                sync_type: 'full',
                usedModels: ['Contact'],
                runs: 'every day',
                version: '2.0.2',
                track_deletes: true,
                auto_start: true,
                input: null,
                output: ['Contact'],
                scopes: ['crm.objects.contacts.read', 'oauth'],
                endpoints: [
                    {
                        method: 'GET',
                        path: '/contacts',
                        group: 'Contacts'
                    }
                ],
                webhookSubscriptions: []
            },
            {
                name: 'companies',
                type: 'sync',
                description: 'Fetches a list of companies from Hubspot',
                sync_type: 'full',
                usedModels: ['Company'],
                runs: 'every day',
                version: '1.0.0',
                track_deletes: true,
                auto_start: true,
                input: null,
                output: ['Company'],
                scopes: ['crm.objects.companies.read', 'oauth'],
                endpoints: [
                    {
                        method: 'GET',
                        path: '/companies',
                        group: 'Companies'
                    }
                ],
                webhookSubscriptions: []
            },
            {
                name: 'deals',
                type: 'sync',
                description: 'Fetches a list of deals from Hubspot with their associated companies and contacts',
                sync_type: 'full',
                usedModels: ['Deal', 'ReturnedAssociations', 'AssociationCompany', 'AssociationContact', 'AssociationDeal'],
                runs: 'every day',
                version: '1.0.0',
                track_deletes: true,
                auto_start: true,
                input: null,
                output: ['Deal'],
                scopes: ['crm.objects.deals.read', 'oauth', 'e-commerce (standard scope)', 'crm.objects.line_items.read (granular scope)'],
                endpoints: [
                    {
                        method: 'GET',
                        path: '/deals',
                        group: 'Deals'
                    }
                ],
                webhookSubscriptions: []
            },
            {
                name: 'products',
                type: 'sync',
                description: 'Fetches a list of products from Hubspot',
                sync_type: 'full',
                usedModels: ['Product'],
                runs: 'every day',
                version: '1.0.0',
                track_deletes: true,
                auto_start: true,
                input: null,
                output: ['Product'],
                scopes: ['e-commerce'],
                endpoints: [
                    {
                        method: 'GET',
                        path: '/products',
                        group: 'Products'
                    }
                ],
                webhookSubscriptions: []
            },
            {
                name: 'owners',
                type: 'sync',
                description: 'Fetches a list of owners from Hubspot',
                sync_type: 'full',
                usedModels: ['HubspotOwner'],
                runs: 'every day',
                version: '1.0.1',
                track_deletes: true,
                auto_start: true,
                input: null,
                output: ['HubspotOwner'],
                scopes: [],
                endpoints: [
                    {
                        method: 'GET',
                        path: '/owners',
                        group: 'Owners'
                    }
                ],
                webhookSubscriptions: []
            },
            {
                name: 'users',
                type: 'sync',
                description: 'Fetches a list of users from Hubspot',
                sync_type: 'full',
                usedModels: ['User'],
                runs: 'every day',
                version: '1.0.3',
                track_deletes: true,
                auto_start: true,
                input: null,
                output: ['User'],
                scopes: ['oauth', 'settings.users.read (standard scope)', 'crm.objects.users.read (granular scope)'],
                endpoints: [
                    {
                        method: 'GET',
                        path: '/users',
                        group: 'Users'
                    }
                ],
                webhookSubscriptions: []
            },
            {
                name: 'knowledge-base',
                type: 'sync',
                description: 'Fetches a list of knowledge base from Hubspot',
                sync_type: 'full',
                usedModels: ['HubspotKnowledgeBase'],
                runs: 'every day',
                version: '1.0.0',
                track_deletes: true,
                auto_start: true,
                input: null,
                output: ['HubspotKnowledgeBase'],
                scopes: [],
                endpoints: [
                    {
                        method: 'GET',
                        path: '/knowledge-base'
                    }
                ],
                webhookSubscriptions: []
            },
            {
                name: 'tasks',
                type: 'sync',
                description: 'Fetches a list of tasks from Hubspot',
                sync_type: 'full',
                usedModels: ['Task', 'ReturnedAssociations', 'AssociationCompany', 'AssociationContact', 'AssociationDeal'],
                runs: 'every day',
                version: '1.0.0',
                track_deletes: true,
                auto_start: true,
                input: null,
                output: ['Task'],
                scopes: ['crm.objects.contacts.read', 'oauth'],
                endpoints: [
                    {
                        method: 'GET',
                        path: '/tasks',
                        group: 'Tasks'
                    }
                ],
                webhookSubscriptions: []
            },
            {
                name: 'currency-codes',
                type: 'sync',
                description: 'Fetch hubspot deals',
                sync_type: 'full',
                usedModels: ['CurrencyCode'],
                runs: 'every day',
                version: '1.0.0',
                track_deletes: true,
                auto_start: true,
                input: null,
                output: ['CurrencyCode'],
                scopes: ['oauth', 'settings.currencies.read'],
                endpoints: [
                    {
                        method: 'GET',
                        path: '/currency-codes'
                    }
                ],
                webhookSubscriptions: []
            }
        ],
        actions: [
            {
                name: 'whoami',
                type: 'action',
                description: 'Fetch current user information',
                version: '1.0.0',
                scopes: [],
                input: null,
                output: ['UserInformation'],
                usedModels: ['UserInformation'],
                endpoint: {
                    method: 'GET',
                    path: '/whoami',
                    group: 'Users'
                }
            },
            {
                name: 'fetch-properties',
                type: 'action',
                description: 'Fetch the properties of a specified object',
                version: '1.0.2',
                scopes: [
                    'oauth',
                    'media_bridge.read',
                    'crm.objects.marketing_events.write',
                    'crm.schemas.custom.read',
                    'crm.pipelines.orders.read',
                    'tickets',
                    'crm.objects.feedback_submissions.read',
                    'crm.objects.goals.read',
                    'crm.objects.custom.write',
                    'crm.objects.custom.read',
                    'crm.objects.marketing_events.read',
                    'timeline',
                    'e-commerce',
                    'automation'
                ],
                input: 'InputProperty',
                output: ['PropertyResponse'],
                usedModels: ['PropertyResponse', 'Property', 'InputProperty'],
                endpoint: {
                    method: 'GET',
                    path: '/properties',
                    group: 'Properties'
                }
            },
            {
                name: 'create-property',
                type: 'action',
                description: 'Create a property in Hubspot',
                version: '1.0.0',
                scopes: [
                    'oauth',
                    'crm.schemas.orders.write',
                    'crm.objects.orders.write',
                    'crm.schemas.contacts.write',
                    'crm.schemas.carts.write',
                    'crm.schemas.deals.write',
                    'crm.objects.users.write',
                    'crm.schemas.companies.write',
                    'crm.objects.carts.write'
                ],
                input: 'CreatePropertyInput',
                output: ['CreatedProperty'],
                usedModels: ['CreatedProperty', 'CreatePropertyInput', 'CustomProperty', 'CustomPropertyOption'],
                endpoint: {
                    method: 'POST',
                    path: '/properties',
                    group: 'Properties'
                }
            },
            {
                name: 'create-deal',
                type: 'action',
                description: 'Creates a single deal in Hubspot',
                version: '1.0.0',
                scopes: ['oauth', 'crm.objects.deals.write', 'oauth'],
                input: 'CreateDealInput',
                output: ['CreateUpdateDealOutput'],
                usedModels: ['CreateUpdateDealOutput', 'CreateDealInput', 'Association', 'AssociationTypes'],
                endpoint: {
                    method: 'POST',
                    path: '/deals',
                    group: 'Deals'
                }
            },
            {
                name: 'update-deal',
                type: 'action',
                description: 'Updates a single deal in Hubspot',
                version: '1.0.0',
                scopes: ['crm.objects.deals.write', 'oauth'],
                input: 'UpdateDealInput',
                output: ['CreateUpdateDealOutput'],
                usedModels: ['CreateUpdateDealOutput', 'UpdateDealInput', 'Association', 'AssociationTypes'],
                endpoint: {
                    method: 'PATCH',
                    path: '/deal',
                    group: 'Deals'
                }
            },
            {
                name: 'delete-deal',
                type: 'action',
                description: 'Deletes a deal in Hubspot',
                version: '',
                scopes: ['crm.objects.deals.write', 'oauth'],
                input: 'Id',
                output: ['SuccessResponse'],
                usedModels: ['SuccessResponse', 'Id'],
                endpoint: {
                    method: 'DELETE',
                    path: '/deal',
                    group: 'Deals'
                }
            },
            {
                name: 'fetch-pipelines',
                type: 'action',
                description: 'Fetch all pipelines for an object type. Defaults to deals',
                version: '',
                scopes: ['oauth', 'crm.objects.deals.read'],
                input: 'OptionalObjectType',
                output: ['PipelineOutput'],
                usedModels: ['PipelineOutput', 'Pipeline', 'Stage', 'OptionalObjectType'],
                endpoint: {
                    method: 'GET',
                    path: '/pipelines',
                    group: 'Pipelines'
                }
            },
            {
                name: 'create-user',
                type: 'action',
                description: 'Creates a single user in Hubspot',
                version: '',
                scopes: ['oauth', 'settings.users.write (standard scope)', 'crm.objects.users.write (granular)'],
                input: 'CreateUser',
                output: ['CreatedUser'],
                usedModels: ['CreatedUser', 'CreateUser'],
                endpoint: {
                    method: 'POST',
                    path: '/users',
                    group: 'Users'
                }
            },
            {
                name: 'delete-user',
                type: 'action',
                description: 'Deletes a user in Hubspot',
                version: '',
                scopes: ['oauth', 'settings.users.write (standard scope)', 'crm.objects.users.write (granular)'],
                input: 'IdEntity',
                output: ['SuccessResponse'],
                usedModels: ['SuccessResponse', 'IdEntity'],
                endpoint: {
                    method: 'DELETE',
                    path: '/users',
                    group: 'Users'
                }
            },
            {
                name: 'fetch-roles',
                type: 'action',
                description: 'Fetch the roles on an account. Requires an enterprise account.',
                version: '',
                scopes: ['oauth', 'settings.users.read (standard scope)', 'crm.objects.users.read (granular scope)'],
                input: null,
                output: ['RoleResponse'],
                usedModels: ['RoleResponse', 'Role'],
                endpoint: {
                    method: 'GET',
                    path: '/roles',
                    group: 'Roles'
                }
            },
            {
                name: 'change-user-role',
                type: 'action',
                description: 'Change a user role. Requires an enterprise account.',
                version: '',
                scopes: ['oauth', 'settings.users.write (standard scope)', 'crm.objects.users.write (granular scope)'],
                input: 'UserRoleInput',
                output: ['ChangedRoleResponse'],
                usedModels: ['ChangedRoleResponse', 'UserRoleInput'],
                endpoint: {
                    method: 'PUT',
                    path: '/roles',
                    group: 'Roles'
                }
            },
            {
                name: 'fetch-account-information',
                type: 'action',
                description: 'Fetch the account information from Hubspot',
                version: '',
                scopes: ['oauth'],
                input: null,
                output: ['Account'],
                usedModels: ['Account'],
                endpoint: {
                    method: 'GET',
                    path: '/account-information'
                }
            },
            {
                name: 'fetch-custom-objects',
                type: 'action',
                description: 'Fetch custom objects in Hubspot. Requires Hubspot enterprise',
                version: '',
                scopes: ['oauth', 'crm.schemas.custom.read'],
                input: null,
                output: ['CustomObject'],
                usedModels: ['CustomObject'],
                endpoint: {
                    method: 'GET',
                    path: '/custom-objects'
                }
            },
            {
                name: 'create-contact',
                type: 'action',
                description: 'Create a single contact in Hubspot',
                version: '',
                scopes: ['crm.objects.contacts.write', 'oauth'],
                input: 'CreateContactInput',
                output: ['CreateUpdateContactOutput'],
                usedModels: ['CreateUpdateContactOutput', 'CreateContactInput'],
                endpoint: {
                    method: 'POST',
                    path: '/contact',
                    group: 'Contacts'
                }
            },
            {
                name: 'update-contact',
                type: 'action',
                description: 'Updates a single contact in Hubspot',
                version: '',
                scopes: ['crm.objects.contacts.write', 'oauth'],
                input: 'UpdateContactInput',
                output: ['CreateUpdateContactOutput'],
                usedModels: ['CreateUpdateContactOutput', 'UpdateContactInput'],
                endpoint: {
                    method: 'PATCH',
                    path: '/contact',
                    group: 'Contacts'
                }
            },
            {
                name: 'delete-contact',
                type: 'action',
                description: 'Deletes a contact in Hubspot',
                version: '',
                scopes: ['crm.objects.contacts.write', 'oauth'],
                input: 'Id',
                output: ['SuccessResponse'],
                usedModels: ['SuccessResponse', 'Id'],
                endpoint: {
                    method: 'DELETE',
                    path: '/contact',
                    group: 'Contacts'
                }
            },
            {
                name: 'create-company',
                type: 'action',
                description: 'Create a single company in Hubspot',
                version: '1.0.1',
                scopes: ['crm.objects.companies.write', 'oauth'],
                input: 'CreateCompanyInput',
                output: ['CreateUpdateCompanyOutput'],
                usedModels: ['CreateUpdateCompanyOutput', 'CreateCompanyInput'],
                endpoint: {
                    method: 'POST',
                    path: '/companies',
                    group: 'Companies'
                }
            },
            {
                name: 'update-company',
                type: 'action',
                description: 'Update a single company in Hubspot',
                version: '',
                scopes: ['crm.objects.companies.write', 'oauth'],
                input: 'UpdateCompanyInput',
                output: ['CreateUpdateCompanyOutput'],
                usedModels: ['CreateUpdateCompanyOutput', 'UpdateCompanyInput'],
                endpoint: {
                    method: 'PATCH',
                    path: '/companies',
                    group: 'Companies'
                }
            },
            {
                name: 'delete-company',
                type: 'action',
                description: 'Deletes a company in Hubspot',
                version: '1.0.2',
                scopes: ['crm.objects.companies.write', 'oauth'],
                input: 'Id',
                output: ['SuccessResponse'],
                usedModels: ['SuccessResponse', 'Id'],
                endpoint: {
                    method: 'DELETE',
                    path: '/companies',
                    group: 'Companies'
                }
            },
            {
                name: 'create-task',
                type: 'action',
                description: 'Creates a single task in Hubspot',
                version: '1.0.1',
                scopes: ['crm.objects.contacts.write', 'oauth'],
                input: 'CreateTaskInput',
                output: ['CreateUpdateTaskOutput'],
                usedModels: ['CreateUpdateTaskOutput', 'Association', 'AssociationTypes', 'CreateTaskInput'],
                endpoint: {
                    method: 'POST',
                    path: '/tasks',
                    group: 'Tasks'
                }
            },
            {
                name: 'update-task',
                type: 'action',
                description: 'Updates a single company in Hubspot',
                version: '1.0.1',
                scopes: ['crm.objects.contacts.write', 'oauth'],
                input: 'CreateUpdateTaskOutput',
                output: ['UpdateTaskInput'],
                usedModels: ['UpdateTaskInput', 'Association', 'AssociationTypes', 'CreateUpdateTaskOutput'],
                endpoint: {
                    method: 'PATCH',
                    path: '/tasks',
                    group: 'Tasks'
                }
            },
            {
                name: 'delete-task',
                type: 'action',
                description: 'Deletes a task in Hubspot',
                version: '1.0.1',
                scopes: ['crm.objects.contacts.write', 'oauth'],
                input: 'Id',
                output: ['SuccessResponse'],
                usedModels: ['SuccessResponse', 'Id'],
                endpoint: {
                    method: 'DELETE',
                    path: '/tasks',
                    group: 'Tasks'
                }
            },
            {
                name: 'create-note',
                type: 'action',
                description: 'Creates a single note in Hubspot',
                version: '',
                scopes: ['crm.objects.contacts.write', 'oauth'],
                input: 'Note',
                output: ['Note'],
                usedModels: ['Note', 'Association', 'AssociationTypes'],
                endpoint: {
                    method: 'POST',
                    path: '/note'
                }
            }
        ],
        onEventScripts: {
            'post-connection-creation': [],
            'pre-connection-deletion': []
        }
    }
] as const;
// ------ /Flows
