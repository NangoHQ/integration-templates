// Generated by ts-to-zod
import { z } from 'zod';

export const idEntitySchema = z.object({
    id: z.string()
});

export const successResponseSchema = z.object({
    success: z.boolean()
});

export const inputPropertySchema = z.object({
    name: z.string()
});

export const propertySchema = z.object({
    updatedAt: z.string(),
    createdAt: z.string(),
    name: z.string(),
    label: z.string(),
    type: z.string(),
    fieldType: z.string(),
    description: z.string(),
    groupName: z.string(),
    options: z.literal('Option[],'),
    displayOrder: z.number(),
    calculated: z.boolean(),
    externalOptions: z.boolean(),
    hasUniqueValue: z.boolean(),
    hidden: z.boolean(),
    hubspotDefined: z.boolean(),
    showCurrencySymbol: z.boolean(),
    modificationMetadata: z.object({
        archivable: z.boolean(),
        readOnlyDefinition: z.boolean(),
        readOnlyValue: z.boolean()
    }),
    formField: z.boolean(),
    dataSensitivity: z.string()
});

export const propertyResponseSchema = z.object({
    result: propertySchema
});

export const optionSchema = z.object({
    label: z.string(),
    value: z.string(),
    displayOrder: z.number(),
    hidden: z.boolean()
});

export const roleSchema = z.object({
    requiresBillingWrite: z.boolean(),
    name: z.string(),
    id: z.string()
});

export const roleResponseSchema = z.object({
    results: z.array(roleSchema)
});

export const userRoleInputSchema = z.object({
    id: z.string(),
    firstName: z.string().optional(),
    lastName: z.string().optional(),
    primaryTeamId: z.string().optional()
});

export const createdUserSchema = z.object({
    id: z.string(),
    firstName: z.string(),
    lastName: z.string(),
    primaryTeamId: z.string().optional(),
    email: z.string(),
    sendWelcomeEmail: z.boolean(),
    roleIds: z.array(z.string()),
    secondaryTeamIds: z.array(z.string()),
    superAdmin: z.boolean()
});

export const changedRoleResponseSchema = z.object({
    id: z.string(),
    firstName: z.string().optional(),
    lastName: z.string().optional(),
    primaryTeamId: z.string().optional(),
    email: z.string(),
    sendWelcomeEmail: z.boolean().optional(),
    roleIds: z.array(z.string()),
    secondaryTeamIds: z.array(z.string()).optional(),
    superAdmin: z.boolean()
});

export const hubspotServiceTicketSchema = z.object({
    id: z.number(),
    createdAt: z.date(),
    updatedAt: z.date(),
    isArchived: z.boolean(),
    subject: z.string(),
    content: z.string(),
    objectId: z.number(),
    ownerId: z.number(),
    pipeline: z.number(),
    pipelineStage: z.number(),
    ticketCategory: z.string().nullable(),
    ticketPriority: z.string()
});

export const hubspotOwnerSchema = z.object({
    id: z.number(),
    email: z.string(),
    firstName: z.string(),
    lastName: z.string(),
    userId: z.number(),
    createdAt: z.date(),
    updatedAt: z.date(),
    archived: z.boolean()
});

export const userSchema = z.object({
    id: z.string(),
    email: z.string(),
    firstName: z.string(),
    lastName: z.string(),
    roleIds: z.array(z.string()),
    primaryTeamId: z.union([z.string(), z.undefined()]).optional(),
    superAdmin: z.boolean()
});

export const createUserSchema = z.object({
    firstName: z.string().optional(),
    lastName: z.string().optional(),
    primaryTeamId: z.string().optional(),
    email: z.string(),
    sendWelcomeEmail: z.boolean().optional(),
    roleId: z.string().optional(),
    secondaryTeamIds: z.array(z.string()).optional()
});

export const hubspotKnowledgeBaseSchema = z.object({
    id: z.string(),
    title: z.string(),
    description: z.string(),
    category: z.string(),
    content: z.string(),
    publishDate: z.number()
});

export const hubspotContactSchema = z.object({
    id: z.string(),
    created_at: z.string(),
    updated_at: z.string(),
    first_name: z.string(),
    last_name: z.string(),
    email: z.string()
});

export const createDealSchema = z.object({
    properties: z.record(z.any()).and(
        z.object({
            dealname: z.string()
        })
    )
});

export const dealDefaultPropertiesSchema = z.object({
    createdate: z.string(),
    days_to_close: z.string(),
    dealname: z.string(),
    hs_closed_amount: z.string(),
    hs_closed_amount_in_home_currency: z.string(),
    hs_closed_won_count: z.string(),
    hs_createdate: z.string(),
    hs_days_to_close_raw: z.string(),
    hs_deal_stage_probability_shadow: z.string(),
    hs_is_closed_lost: z.string(),
    hs_is_closed_won: z.string(),
    hs_is_deal_split: z.string(),
    hs_lastmodifieddate: z.string(),
    hs_object_id: z.string(),
    hs_object_source: z.string(),
    hs_object_source_id: z.string(),
    hs_object_source_label: z.string(),
    hs_projected_amount: z.string(),
    hs_projected_amount_in_home_currency: z.string()
});

export const createdDealSchema = z.object({
    id: z.string(),
    properties: dealDefaultPropertiesSchema,
    createdAt: z.string(),
    updatedAt: z.string(),
    archived: z.boolean()
});
