// Generated by ts-to-zod
import { z } from 'zod';

export const idEntitySchema = z.object({
    id: z.string()
});

export const documentMetadataSchema = z.object({
    files: z.union([z.array(z.string()), z.undefined()]),
    folders: z.union([z.array(z.string()), z.undefined()])
});

export const documentSchema = z.object({
    id: z.string(),
    url: z.string(),
    title: z.string(),
    mimeType: z.string(),
    updatedAt: z.string()
});

export const folderSchema = z.object({
    id: z.string(),
    url: z.string(),
    title: z.string(),
    mimeType: z.string(),
    updatedAt: z.string()
});

export const jSONSpreadsheetSchema = z.object({
    spreadsheetId: z.string(),
    properties: z.record(z.any()),
    sheets: z.array(z.record(z.any())),
    namedRanges: z.array(z.record(z.any())),
    spreadsheetUrl: z.string(),
    developerMetadata: z.array(z.record(z.any())),
    dataSources: z.array(z.record(z.any())),
    dataSourceSchedules: z.array(z.record(z.any()))
});

export const jSONDocumentSchema = z.object({
    documentId: z.string(),
    title: z.string(),
    url: z.string(),
    tabs: z.array(z.record(z.any())),
    revisionId: z.string(),
    suggestionsViewMode: z.union([
        z.literal('DEFAULT_FOR_CURRENT_ACCESS'),
        z.literal('SUGGESTIONS_INLINE'),
        z.literal('PREVIEW_SUGGESTIONS_ACCEPTED'),
        z.literal('PREVIEW_WITHOUT_SUGGESTIONS')
    ]),
    body: z.record(z.any()),
    headers: z.record(z.any()),
    footers: z.record(z.any()),
    footnotes: z.record(z.any()),
    documentStyle: z.record(z.any()),
    suggestedDocumentStyleChanges: z.record(z.any()),
    namedStyles: z.record(z.any()),
    suggestedNamedStylesChanges: z.record(z.any()),
    lists: z.record(z.any()),
    namedRanges: z.record(z.any()),
    inlineObjects: z.record(z.any()),
    positionedObjects: z.record(z.any())
});

export const fetchFoldersInputSchema = z.object({
    id: z.string().optional(),
    cursor: z.union([z.string(), z.undefined()]).optional()
});

export const googleDocumentSchema = z.object({
    id: z.string(),
    name: z.string(),
    mimeType: z.string(),
    parents: z.array(z.string()).optional(),
    modifiedTime: z.string().optional(),
    createdTime: z.string().optional(),
    webViewLink: z.string().optional(),
    kind: z.string().optional()
});

export const googleDriveFolderSchema = z.object({
    folders: z.array(googleDocumentSchema).optional(),
    cursor: z.union([z.string(), z.undefined()]).optional()
});

export const uploadFileInputSchema = z.object({
    content: z.string(),
    name: z.string(),
    mimeType: z.string(),
    folderId: z.union([z.string(), z.undefined()]).optional(),
    description: z.union([z.string(), z.undefined()]).optional(),
    isBase64: z.union([z.boolean(), z.undefined()]).optional()
});

export const folderContentInputSchema = z.object({
    id: z.string().optional(),
    cursor: z.string().optional()
});

export const folderContentSchema = z.object({
    files: z.array(googleDocumentSchema),
    folders: z.array(googleDocumentSchema),
    cursor: z.string().optional()
});

export const anonymousGoogledriveActionFetchdocumentOutputSchema = z.string();
