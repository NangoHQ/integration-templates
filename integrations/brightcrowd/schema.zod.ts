// Generated by ts-to-zod
import { z } from 'zod';

export const successResponseSchema = z.object({
    success: z.boolean()
});

export const idEntitySchema = z.object({
    id: z.string()
});

export const affiliationSchema = z.object({
    type: z.union([z.literal('OtherAffiliation'), z.literal('UniversityAffiliation'), z.literal('CompanyAffiliation')]),
    organization: z.string().optional().nullable(),
    major: z.union([z.string(), z.array(z.string())]).optional(),
    degree: z.union([z.string(), z.array(z.string())]).optional(),
    school: z.union([z.string(), z.array(z.string())]).optional(),
    graduationYear: z.number().optional().nullable(),
    specialty: z.union([z.string(), z.array(z.string())]).optional(),
    category: z.union([z.string(), z.array(z.string())]).optional(),
    title: z.string().optional(),
    startYear: z.number().optional().nullable(),
    endYear: z.number().optional().nullable(),
    office: z.union([z.string(), z.array(z.string())]).optional(),
    group: z.union([z.string(), z.array(z.string())]).optional()
});

export const questionSchema = z.object({
    id: z.string(),
    type: z.string(),
    name: z.string(),
    description: z.string().optional(),
    warning: z.string().optional(),
    route: z.string(),
    questionHeader: z.string().optional().nullable(),
    questionSubheader: z.string().optional().nullable(),
    headline: z.string().optional(),
    active: z.boolean(),
    required: z.boolean(),
    adminOnly: z.boolean()
});

export const bookSchema = z.object({
    id: z.string(),
    uri: z.string(),
    userUri: z.string(),
    alias: z.string(),
    organizationUri: z.string(),
    baUri: z.string(),
    name: z.string(),
    pictureId: z.string().nullable(),
    bookTemplateUri: z.string(),
    config: z.string().nullable(),
    coverPictureId: z.string().nullable(),
    bannerPictureId: z.string().nullable(),
    affiliation: affiliationSchema.nullable(),
    questions: z.array(questionSchema),
    flags: z.array(z.string()),
    publishedAt: z.string().optional().nullable(),
    closedAt: z.string().optional().nullable(),
    lockedAt: z.string().optional().nullable(),
    created: z.string(),
    modified: z.string()
});

export const sectionSchema = z.object({
    uri: z.string(),
    title: z.string(),
    snippet: z.string(),
    disabled: z.boolean()
});

export const instructionSchema = z.object({
    addPage: z.string().nullable(),
    editPage: z.string().nullable(),
    requestAccess: z.string().nullable()
});

export const pictureSchema = z.object({
    type: z.union([z.literal('profile'), z.literal('content'), z.literal('caption')]),
    id: z.string(),
    caption: z.string().optional().nullable()
});

export const videoSchema = z.object({
    url: z.string(),
    caption: z.string().optional().nullable()
});

export const pageSchema = z.object({
    id: z.string(),
    uri: z.string(),
    userUri: z.string(),
    bookUri: z.string(),
    alias: z.string(),
    name: z.string(),
    status: z.union([z.literal('draft'), z.literal('published'), z.literal('hidden')]),
    content: z.object({
        firstName: z.string(),
        lastName: z.string(),
        previousName: z.string().optional().nullable(),
        suffix: z.string().optional(),
        partnerFirstName: z.string().optional().nullable(),
        partnerLastName: z.string().optional().nullable(),
        pronouns: z.string().optional(),
        pictureId: z.string().optional().nullable(),
        audioId: z.string().optional().nullable()
    }),
    pictures: z.array(pictureSchema).optional().nullable(),
    videos: z.array(videoSchema).optional().nullable(),
    tagUsers: z.array(z.string()).optional().nullable(),
    homeTown: z.string().optional().nullable(),
    currentCity: z.string().optional().nullable(),
    campusResidence: z.string().optional().nullable(),
    affiliations: z.array(affiliationSchema).optional().nullable(),
    plan: z.union([z.literal('school'), z.literal('work'), z.literal('other')]).optional(),
    created: z.string(),
    modifiedByUserAt: z.string().optional().nullable(),
    completedByUserAt: z.string().optional().nullable(),
    externalId: z.string().optional()
});
