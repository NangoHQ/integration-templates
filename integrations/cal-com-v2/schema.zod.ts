// Generated by ts-to-zod
import { z } from 'zod';

export const eventTypeSchema = z.object({
    id: z.string(),
    teamId: z.number().nullable(),
    schedulingType: z.string().nullable(),
    userId: z.number(),
    metadata: z.record(z.string(), z.any()),
    description: z.string().nullable(),
    hidden: z.boolean(),
    slug: z.string(),
    length: z.number(),
    title: z.string(),
    requiresConfirmation: z.boolean(),
    position: z.number(),
    offsetStart: z.number(),
    profileId: z.string().nullable(),
    eventName: z.string().nullable(),
    parentId: z.number().nullable(),
    timeZone: z.string().nullable(),
    periodType: z.string(),
    periodStartDate: z.string().nullable(),
    periodEndDate: z.string().nullable(),
    periodDays: z.number().nullable(),
    periodCountCalendarDays: z.number().nullable(),
    lockTimeZoneToggleOnBookingPage: z.boolean(),
    requiresBookerEmailVerification: z.boolean(),
    disableGuests: z.boolean(),
    hideCalendarNotes: z.boolean(),
    minimumBookingNotice: z.number(),
    beforeEventBuffer: z.number(),
    afterEventBuffer: z.number(),
    seatsPerTimeSlot: z.number().nullable(),
    onlyShowFirstAvailableSlot: z.boolean(),
    seatsShowAttendees: z.boolean(),
    seatsShowAvailabilityCount: z.boolean(),
    scheduleId: z.number().nullable(),
    price: z.number(),
    currency: z.string(),
    slotInterval: z.number().nullable(),
    successRedirectUrl: z.string().nullable(),
    isInstantEvent: z.boolean(),
    aiPhoneCallConfig: z.string().nullable(),
    assignAllTeamMembers: z.boolean(),
    recurringEvent: z.boolean().nullable(),
    locations: z.array(
        z.object({
            type: z.string()
        })
    ),
    bookingFields: z.string().nullable(),
    useEventTypeDestinationCalendarEmail: z.boolean(),
    secondaryEmailId: z.string().nullable(),
    bookingLimits: z.boolean().nullable(),
    durationLimits: z.boolean().nullable(),
    hashedLink: z.string().nullable(),
    children: z.array(z.record(z.string(), z.any())),
    hosts: z.array(z.record(z.string(), z.any())),
    userIds: z.array(z.number())
});

export const userSchema = z.object({
    username: z.string(),
    name: z.string(),
    weekStart: z.string(),
    organizationId: z.number(),
    avatarUrl: z.string(),
    profile: z.object({
        username: z.string(),
        id: z.number(),
        userId: z.number(),
        uid: z.string(),
        name: z.string(),
        organizationId: z.number(),
        organization: z.object({
            id: z.number(),
            slug: z.string(),
            name: z.string(),
            metadata: z.record(z.string(), z.any())
        }),
        upId: z.string(),
        image: z.string(),
        brandColor: z.string(),
        darkBrandColor: z.string(),
        theme: z.string(),
        bookerLayouts: z.record(z.string(), z.any())
    }),
    bookerUrl: z.string()
});

export const attendeeSchema = z.object({
    id: z.number(),
    email: z.string(),
    name: z.string(),
    timeZone: z.string(),
    locale: z.string(),
    bookingId: z.number()
});

export const eventSchema = z.object({
    id: z.string(),
    title: z.string(),
    userPrimaryEmail: z.string(),
    description: z.string(),
    customInputs: z.record(z.string(), z.any()),
    startTime: z.string(),
    endTime: z.string(),
    attendees: z.array(attendeeSchema),
    metadata: z.record(z.string(), z.any()),
    uid: z.string(),
    recurringEventId: z.string(),
    location: z.string(),
    eventType: z.object({
        slug: z.string(),
        id: z.number(),
        eventName: z.string(),
        price: z.number(),
        recurringEvent: z.record(z.string(), z.any()),
        currency: z.string(),
        metadata: z.record(z.string(), z.any()),
        seatsShowAttendees: z.record(z.string(), z.any()),
        seatsShowAvailabilityCount: z.record(z.string(), z.any()),
        team: z.record(z.string(), z.any())
    }),
    status: z.record(z.string(), z.any()),
    paid: z.boolean(),
    payment: z.array(z.record(z.string(), z.any())),
    references: z.array(
        z.object({
            id: z.number(),
            type: z.string(),
            uid: z.string(),
            meetingId: z.string(),
            thirdPartyRecurringEventId: z.string(),
            meetingPassword: z.string(),
            meetingUrl: z.string(),
            bookingId: z.number(),
            externalCalendarId: z.string(),
            deleted: z.record(z.string()),
            credentialId: z.number()
        })
    ),
    isRecorded: z.boolean(),
    seatsReferences: z.array(z.record(z.string(), z.any())),
    user: userSchema,
    rescheduled: z.record(z.string(), z.any())
});
