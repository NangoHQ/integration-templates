// ---------------------------
// This file was generated by Nango (v0.58.6)
// You can version this file
// ---------------------------

export interface AnrokAddress {
    line1: string;
    city: string;
    postalCode: string;
    country: string;
}

export interface AnrokLineItems {
    id: string;
    productExternalId: string;
    amount: number;
}

export interface AnrokTaxIds {
    type: string;
    value: string;
}

export interface AnrokTransactionData {
    id?: string | undefined;
    accountingDate: string;
    currencyCode: string;
    customerId: string;
    customerName: string;
    customerAddress: AnrokAddress;
    lineItems: AnrokLineItems[];
    customerTaxIds?: AnrokTaxIds[];
}

export interface AnrokContact {
    external_id: string;
    name: string;
    address_line_1: string;
    city: string;
    zip: string;
    country: string;
    taxable: boolean;
    tax_number: string;
}

export interface BaseTransaction {
    id?: string | undefined;
    issuing_date: string;
    currency: string;
    contact: AnrokContact;
}

export interface TransactionFee {
    item_id: string;
    item_code: string | null;
    amount_cents: number | null;
}

export interface Transaction {
    id?: string | undefined;
    issuing_date: string;
    currency: string;
    contact: AnrokContact;
    fees: TransactionFee[];
}

export interface TaxBreakdown {
    name?: string;
    rate?: string;
    tax_amount?: number;
    type?: string | null;
    reason?: string;
}

export interface FailedTransaction {
    id?: string | undefined;
    issuing_date: string;
    currency: string;
    contact: AnrokContact;
    fees: TransactionFee[];
    validation_errors: any;
}

export interface SuccessTransaction {
    id?: string | undefined;
    issuing_date: string;
    currency: string;
    contact: AnrokContact;
    fees: TransactionFee[];
    sub_total_excluding_taxes?: number;
    taxes_amount_cents?: number;
}

export interface TransactionActionResponse {
    succeeded: SuccessTransaction[];
    failed: FailedTransaction[];
}

export interface TransactionToNegate {
    id: string;
    voided_id: string;
}

export interface TransactionToDelete {
    id: string;
}

export interface FailedTransactionToNegate {
    id: string;
    voided_id: string;
    validation_errors: any;
}

export interface TransactionNegationActionResponse {
    succeeded: TransactionToNegate[];
    failed: FailedTransactionToNegate[];
}

export interface FailedTransactionToDelete {
    id: string;
    validation_errors: any;
}

export interface TransactionDeletionActionResponse {
    succeeded: TransactionToDelete[];
    failed: FailedTransactionToDelete[];
}

export interface TransactionFeeWithTaxBreakdown {
    item_id: string;
    item_code: string | null;
    amount_cents: number | null;
    tax_amount_cents: number;
    tax_breakdown: TaxBreakdown[];
}

/** @deprecated It is recommended to use a Model */
export type Anonymous_anrok_action_createorupdatetransaction_input = Transaction[];

/** @deprecated It is recommended to use a Model */
export type Anonymous_anrok_action_voidtransaction_input = TransactionToDelete[];

/** @deprecated It is recommended to use a Model */
export type Anonymous_anrok_action_negatetransaction_input = TransactionToNegate[];
