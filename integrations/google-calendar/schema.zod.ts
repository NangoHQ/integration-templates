// Generated by ts-to-zod
import { z } from 'zod';

export const googleCalendarSchema = z.object({
    kind: z.string(),
    etag: z.string(),
    id: z.string(),
    summary: z.string(),
    description: z.string(),
    location: z.string(),
    timeZone: z.string(),
    summaryOverride: z.string(),
    colorId: z.string(),
    backgroundColor: z.string(),
    foregroundColor: z.string(),
    hidden: z.boolean(),
    selected: z.boolean(),
    accessRole: z.string(),
    defaultReminders: z.array(
        z.object({
            method: z.string(),
            minutes: z.number()
        })
    ),
    notificationSettings: z.object({
        notifications: z.array(
            z.object({
                type: z.string(),
                method: z.string()
            })
        )
    }),
    primary: z.boolean(),
    deleted: z.boolean(),
    conferenceProperties: z.object({
        allowedConferenceSolutionTypes: z.array(z.string())
    })
});

export const googleCalendarEventSchema = z.object({
    kind: z.string(),
    etag: z.string(),
    id: z.string(),
    status: z.string(),
    htmlLink: z.string(),
    created: z.string(),
    updated: z.string(),
    summary: z.string(),
    description: z.string(),
    location: z.string(),
    colorId: z.string(),
    creator: z.object({
        id: z.string(),
        email: z.string(),
        displayName: z.string(),
        self: z.boolean()
    }),
    organizer: z.object({
        id: z.string(),
        email: z.string(),
        displayName: z.string(),
        self: z.boolean()
    }),
    start: z.object({
        date: z.date(),
        dateTime: z.string(),
        timeZone: z.string()
    }),
    end: z.object({
        date: z.date(),
        string: z.string(),
        timeZone: z.string()
    }),
    endTimeUnspecified: z.boolean(),
    recurrence: z.array(z.string()),
    recurringEventId: z.string(),
    originalStartTime: z.object({
        date: z.date(),
        dateTime: z.string(),
        timeZone: z.string()
    }),
    transparency: z.string(),
    visibility: z.string(),
    iCalUID: z.string(),
    sequence: z.number(),
    attendees: z.array(
        z.object({
            id: z.string(),
            email: z.string(),
            displayName: z.string(),
            organizer: z.boolean(),
            self: z.boolean(),
            resource: z.boolean(),
            optional: z.boolean(),
            responseStatus: z.string(),
            comment: z.string(),
            additionalGuests: z.number()
        })
    ),
    attendeesOmitted: z.boolean(),
    extendedProperties: z.object({
        private: z.object({
            key: z.string()
        }),
        shared: z.object({
            key: z.string()
        })
    }),
    hangoutLink: z.string(),
    conferenceData: z.object({
        createRequest: z.object({
            requestId: z.string(),
            conferenceSolutionKey: z.object({
                type: z.string()
            }),
            status: z.object({
                statusCode: z.string()
            })
        }),
        entryPoints: z.array(
            z.object({
                entryPointType: z.string(),
                uri: z.string(),
                label: z.string(),
                pin: z.string(),
                accessCode: z.string(),
                meetingCode: z.string(),
                passcode: z.string(),
                password: z.string()
            })
        ),
        conferenceSolution: z.object({
            key: z.object({
                type: z.string()
            }),
            name: z.string(),
            iconUri: z.string()
        }),
        conferenceId: z.string(),
        signature: z.string(),
        notes: z.string()
    }),
    gadget: z.object({
        type: z.string(),
        title: z.string(),
        link: z.string(),
        iconLink: z.string(),
        width: z.number(),
        height: z.number(),
        display: z.string(),
        preferences: z.object({
            key: z.string()
        })
    }),
    anyoneCanAddSelf: z.boolean(),
    guestsCanInviteOthers: z.boolean(),
    guestsCanModify: z.boolean(),
    guestsCanSeeOtherGuests: z.boolean(),
    privateCopy: z.boolean(),
    locked: z.boolean(),
    reminders: z.object({
        useDefault: z.boolean(),
        overrides: z.array(
            z.object({
                method: z.string(),
                minutes: z.number()
            })
        )
    }),
    source: z.object({
        url: z.string(),
        title: z.string()
    }),
    workingLocationProperties: z.object({
        type: z.string(),
        homeOffice: z.string(),
        customLocation: z.object({
            label: z.string()
        }),
        officeLocation: z.object({
            buildingId: z.string(),
            floorId: z.string(),
            floorSectionId: z.string(),
            deskId: z.string(),
            label: z.string()
        })
    }),
    attachments: z.array(
        z.object({
            fileUrl: z.string(),
            title: z.string(),
            mimeType: z.string(),
            iconLink: z.string(),
            fileId: z.string()
        })
    ),
    eventType: z.string()
});
