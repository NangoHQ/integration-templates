// ---------------------------
// This file was generated by Nango (v0.56.1)
// You can version this file
// ---------------------------

export interface LeverOpportunity {
    id: string;
    name: string;
    headline: string;
    contact: string;
    emails: string[];
    phones: string[];
    confidentiality: string;
    location: string;
    links: string[];
    archived: { reason: string; archivedAt: number };
    createdAt: number;
    updatedAt: number;
    lastInteractionAt: number;
    lastAdvancedAt: number;
    snoozedUntil: number;
    archivedAt: number;
    archiveReason: string;
    stage: string;
    stageChanges: string[];
    owner: string;
    tags: string[];
    sources: string[];
    origin: string;
    sourcedBy: string;
    applications: string[];
    resume: string;
    followers: string[];
    urls: { list: string; show: string };
    dataProtection: Record<string, any>;
    isAnonymized: boolean;
    opportunityLocation: string;
}

export interface LeverOpportunityApplication {
    id: string;
    opportunityId: string;
    candidateId: string;
    createdAt: number;
    type: string;
    posting: string;
    postingHiringManager: string;
    postingOwner: string;
    user: string;
    name: string;
    email: string;
    phone: { type: string; value: string };
    requisitionForHire: { id: string; requisitionCode: string; hiringManagerOnHire: string };
    ownerId: string;
    hiringManager: string;
    company: string;
    links: string[];
    comments: string;
    customQuestions: string[];
    archived: { reason: string; archivedAt: number };
}

export interface LeverOpportunityFeedback {
    id: string;
    type: string;
    text: string;
    instructions: string;
    fields: string[];
    baseTemplateId: string;
    interview: string;
    panel: string;
    user: string;
    createdAt: number;
    completedAt: number;
    updatedAt: number;
    deletedAt: number;
}

export interface LeverOpportunityInterview {
    id: string;
    panel: string;
    subject: string;
    note: string;
    interviewers: string[];
    timezone: string;
    createdAt: number;
    date: number;
    duration: number;
    location: string;
    feedbackTemplate: string;
    feedbackForms: string[];
    feedbackReminder: string;
    user: string;
    stage: string;
    canceledAt: number;
    postings: string[];
    gcalEventUrl: string;
}

export interface LeverOpportunityNote {
    id: string;
    text: string;
    fields: string[];
    user: string;
    secret: boolean;
    completedAt: number;
    createdAt: number;
    deletedAt: number;
}

export interface LeverOpportunityOffer {
    id: string;
    createdAt: number;
    status: string;
    creator: string;
    fields: string[];
    sentDocument: { fileName: string; uploadedAt: number; downloadUrl: string };
    signedDocument: { fileName: string; uploadedAt: number; downloadUrl: string };
}

export interface LeverPosting {
    perform_as?: string;
    id: string;
    text: string;
    createdAt: number;
    updatedAt: number;
    user: string;
    owner: string;
    hiringManager: string;
    confidentiality: string;
    categories: { team: string; department: string; location: string; allLocations: string[]; commitment: string; level: string };
    content: { description: string; descriptionHtml: string; lists: string[]; closing: string; closingHtml: string };
    country: string;
    followers: string[];
    tags: string[];
    state: string;
    distributionChannels: string[];
    reqCode: string;
    requisitionCodes: string[];
    salaryDescription: string;
    salaryDescriptionHtml: string;
    salaryRange: { max: number; min: number; currency: string; interval: string };
    urls: { list: string; show: string; apply: string };
    workplaceType: string;
}

export interface LeverPostingApply {
    id: string;
    text: string;
    customQuestions: string[];
    eeoQuestions: string[];
    personalInformation: string[];
    urls: string[];
}

export interface LeverStage {
    id: string;
    text: string;
}

export interface LeverCreateNoteInput {
    opportunityId: string;
    perform_as: string | undefined;
    note_id: string | undefined;
    value: string | undefined;
    secret: boolean | undefined;
    score: number | undefined;
    notifyFollowers: boolean | undefined;
    createdAt: number | undefined;
}

export interface PhoneEntry {
    value: string | undefined;
    type: string | undefined;
}

export interface ArchievedEntry {
    archivedAt: number | undefined;
    reason: string | undefined;
}

export interface LeverCreateOpportunityInput {
    perform_as: string;
    parse: boolean | undefined;
    perform_as_posting_owner: boolean | undefined;
    name: string | undefined;
    headline: string | undefined;
    stage: string | undefined;
    location: string | undefined;
    phones: PhoneEntry[] | undefined;
    emails: string | undefined;
    links: string[] | undefined;
    tags: string[] | undefined;
    sources: string[] | undefined;
    origin: string | undefined;
    owner: string | undefined;
    followers: string[] | undefined;
    postings: string[] | undefined;
    createdAt: number | undefined;
    archived: ArchievedEntry | undefined;
    contact: string[] | undefined;
}

export interface UpdateOpportunityStage {
    perform_as?: string;
    stage: string;
    opportunityId: string;
}

export interface ArchiveOpportunity {
    perform_as?: string;
    reason: string;
    requisitionId?: string;
    opportunityId: string;
    cleanInterviews?: boolean;
}

export interface ArchiveObject {
    reason: string;
    cleanInterviews?: boolean;
    requisitionId?: string;
}

export interface UpdateLinks {
    perform_as?: string;
    links: string[];
    opportunityId: string;
    delete: boolean;
}

export interface UpdateTags {
    opportunityId: string;
    perform_as?: string;
    tags: string[];
    delete: boolean;
}

export interface UpdateSources {
    opportunityId: string;
    perform_as?: string;
    sources: string[];
    delete: boolean;
}

export interface Stages {
    id: string;
    text: string;
}

export interface GetStages {
    stages: Stages[];
}

export interface Users {
    id: string;
    name: string;
    username: string;
    email: string;
    accessRole: string;
    photo: string | null;
    createdAt: number;
    deactivatedAt: string | null;
    externalDirectoryId: string | null;
    linkedContactIds: string[] | null;
    jobTitle: string | null;
    managerId: string | null;
}

export interface GetUsers {
    users: Users[];
}

export interface SuccessResponse {
    success: boolean;
    opportunityId?: string;
    response?: LeverOpportunity;
}

export interface ApplyCandidate {
    send_confirmation_email?: boolean;
    customQuestions: any[];
    personalInformation: any[];
    eeoResponses: Record<string, any>;
    urls: any[];
    ipAddress?: string;
    source?: string;
    consent?: Record<string, any>;
    diversitySurvey?: Record<string, any>;
    origin?: string;
}

export interface PostingCategories {
    team: string;
    department: string;
    location?: string;
    commitment?: string;
    allLocations?: string[];
}

export interface ContentList {
    text: string;
    content: string;
}

export interface PostingContent {
    descriptionHtml: string;
    lists?: ContentList[];
    closingPostingHtml?: string;
}

export interface SinglePost {
    id: string;
}

export interface QuestionResponse {
    name: string;
    value: string;
}

export interface CustomQuestionResponse {
    value: string;
}

export interface CustomQuestion {
    id: string;
    fields: CustomQuestionResponse[];
}

export interface DiversityQuestionResponse {
    questionId: string;
    questionText: string;
    questionType: string;
    answer: string;
}

export interface ApplyToPosting {
    postId: string;
    send_confirmation_email?: boolean;
    personalInformation: QuestionResponse[];
    eeoResponses: Record<string, any>;
    urls?: QuestionResponse[];
    CustomQuestions?: CustomQuestion[];
    ipAddress?: string;
    source?: string;
    consent?: { marketing: { provided: boolean; compliancePolicyId: string }; store: { provided: boolean; compliancePolicyId: string } };
    diversitySurvey?: { surveyId: string; candidateSelectedLocation: string; responses: DiversityQuestionResponse[] };
    origin?: string;
}

export interface UpdateOpportunity {
    opportunityId: string;
    perform_as?: string;
    delete?: boolean;
    links?: string[];
    sources?: string[];
    stage?: string;
    tags?: string[];
    reason?: string;
    cleanInterviews?: boolean;
    requisitionId?: string;
}

export interface StageChangesObject {
    toStageId: string;
    toStageIndex: number;
    updatedAt: number;
    userId: string;
}

export interface ReturnObjUpdateOpportunity {
    data: {
        id?: string;
        name?: string;
        headline?: string;
        contact?: string;
        emails?: string[];
        phones?: string[];
        confidentiality?: string;
        location?: string;
        links?: string[];
        archived?: { reason?: string; archivedAt?: number };
        createdAt?: number;
        updatedAt?: number;
        lastInteractionAt?: number;
        lastAdvancedAt?: number;
        snoozedUntil?: number | null;
        archivedAt?: number;
        archiveReason?: string;
        stage?: string;
        stageChanges?: StageChangesObject[];
        owner?: string;
        tags?: string[];
        sources?: string[];
        origin?: string;
        sourcedBy?: string;
        applications?: string[];
        resume?: string;
        followers?: string[];
        urls?: { list?: string; show?: string };
        dataProtection?: Record<string, any> | null;
        isAnonymized?: boolean;
        opportunityLocation?: string;
    };
}
