// Generated by ts-to-zod
import { z } from 'zod';

export const leverOpportunitySchema = z.object({
    id: z.string(),
    name: z.string(),
    headline: z.string(),
    contact: z.string(),
    emails: z.array(z.string()),
    phones: z.array(z.string()),
    confidentiality: z.string(),
    location: z.string(),
    links: z.array(z.string()),
    archived: z.object({
        reason: z.string(),
        archivedAt: z.number()
    }),
    createdAt: z.number(),
    updatedAt: z.number(),
    lastInteractionAt: z.number(),
    lastAdvancedAt: z.number(),
    snoozedUntil: z.number(),
    archivedAt: z.number(),
    archiveReason: z.string(),
    stage: z.string(),
    stageChanges: z.array(z.string()),
    owner: z.string(),
    tags: z.array(z.string()),
    sources: z.array(z.string()),
    origin: z.string(),
    sourcedBy: z.string(),
    applications: z.array(z.string()),
    resume: z.string(),
    followers: z.array(z.string()),
    urls: z.object({
        list: z.string(),
        show: z.string()
    }),
    dataProtection: z.record(z.any()),
    isAnonymized: z.boolean(),
    opportunityLocation: z.string()
});

export const leverOpportunityApplicationSchema = z.object({
    id: z.string(),
    opportunityId: z.string(),
    candidateId: z.string(),
    createdAt: z.number(),
    type: z.string(),
    posting: z.string(),
    postingHiringManager: z.string(),
    postingOwner: z.string(),
    user: z.string(),
    name: z.string(),
    email: z.string(),
    phone: z.object({
        type: z.string(),
        value: z.string()
    }),
    requisitionForHire: z.object({
        id: z.string(),
        requisitionCode: z.string(),
        hiringManagerOnHire: z.string()
    }),
    ownerId: z.string(),
    hiringManager: z.string(),
    company: z.string(),
    links: z.array(z.string()),
    comments: z.string(),
    customQuestions: z.array(z.string()),
    archived: z.object({
        reason: z.string(),
        archivedAt: z.number()
    })
});

export const leverOpportunityFeedbackSchema = z.object({
    id: z.string(),
    type: z.string(),
    text: z.string(),
    instructions: z.string(),
    fields: z.array(z.string()),
    baseTemplateId: z.string(),
    interview: z.string(),
    panel: z.string(),
    user: z.string(),
    createdAt: z.number(),
    completedAt: z.number(),
    updatedAt: z.number(),
    deletedAt: z.number()
});

export const leverOpportunityInterviewSchema = z.object({
    id: z.string(),
    panel: z.string(),
    subject: z.string(),
    note: z.string(),
    interviewers: z.array(z.string()),
    timezone: z.string(),
    createdAt: z.number(),
    date: z.number(),
    duration: z.number(),
    location: z.string(),
    feedbackTemplate: z.string(),
    feedbackForms: z.array(z.string()),
    feedbackReminder: z.string(),
    user: z.string(),
    stage: z.string(),
    canceledAt: z.number(),
    postings: z.array(z.string()),
    gcalEventUrl: z.string()
});

export const leverOpportunityNoteSchema = z.object({
    id: z.string(),
    text: z.string(),
    fields: z.array(z.string()),
    user: z.string(),
    secret: z.boolean(),
    completedAt: z.number(),
    createdAt: z.number(),
    deletedAt: z.number()
});

export const leverOpportunityOfferSchema = z.object({
    id: z.string(),
    createdAt: z.number(),
    status: z.string(),
    creator: z.string(),
    fields: z.array(z.string()),
    sentDocument: z.object({
        fileName: z.string(),
        uploadedAt: z.number(),
        downloadUrl: z.string()
    }),
    signedDocument: z.object({
        fileName: z.string(),
        uploadedAt: z.number(),
        downloadUrl: z.string()
    })
});

export const leverPostingSchema = z.object({
    id: z.string(),
    text: z.string(),
    createdAt: z.number(),
    updatedAt: z.number(),
    user: z.string(),
    owner: z.string(),
    hiringManager: z.string(),
    confidentiality: z.string(),
    categories: z.object({
        team: z.string(),
        department: z.string(),
        location: z.string(),
        allLocations: z.array(z.string()),
        commitment: z.string(),
        level: z.string()
    }),
    content: z.object({
        description: z.string(),
        descriptionHtml: z.string(),
        lists: z.array(z.string()),
        closing: z.string(),
        closingHtml: z.string()
    }),
    country: z.string(),
    followers: z.array(z.string()),
    tags: z.array(z.string()),
    state: z.string(),
    distributionChannels: z.array(z.string()),
    reqCode: z.string(),
    requisitionCodes: z.array(z.string()),
    salaryDescription: z.string(),
    salaryDescriptionHtml: z.string(),
    salaryRange: z.object({
        max: z.number(),
        min: z.number(),
        currency: z.string(),
        interval: z.string()
    }),
    urls: z.object({
        list: z.string(),
        show: z.string(),
        apply: z.string()
    }),
    workplaceType: z.string()
});

export const leverPostingApplySchema = z.object({
    id: z.string(),
    text: z.string(),
    customQuestions: z.array(z.string()),
    eeoQuestions: z.array(z.string()),
    personalInformation: z.array(z.string()),
    urls: z.array(z.string())
});

export const leverStageSchema = z.object({
    id: z.string(),
    text: z.string()
});

export const leverCreateNoteInputSchema = z.object({
    opportunityId: z.string(),
    perform_as: z.union([z.string(), z.undefined()]),
    note_id: z.union([z.string(), z.undefined()]),
    value: z.union([z.string(), z.undefined()]),
    secret: z.union([z.boolean(), z.undefined()]),
    score: z.union([z.number(), z.undefined()]),
    notifyFollowers: z.union([z.boolean(), z.undefined()]),
    createdAt: z.union([z.number(), z.undefined()])
});

export const phoneEntrySchema = z.object({
    value: z.union([z.string(), z.undefined()]),
    type: z.union([z.string(), z.undefined()])
});

export const archievedEntrySchema = z.object({
    archivedAt: z.union([z.number(), z.undefined()]),
    reason: z.union([z.string(), z.undefined()])
});

export const leverCreateOpportunityInputSchema = z.object({
    perform_as: z.string(),
    parse: z.union([z.boolean(), z.undefined()]),
    perform_as_posting_owner: z.union([z.boolean(), z.undefined()]),
    name: z.union([z.string(), z.undefined()]),
    headline: z.union([z.string(), z.undefined()]),
    stage: z.union([z.string(), z.undefined()]),
    location: z.union([z.string(), z.undefined()]),
    phones: z.union([z.array(phoneEntrySchema), z.undefined()]),
    emails: z.union([z.string(), z.undefined()]),
    links: z.union([z.array(z.string()), z.undefined()]),
    tags: z.union([z.array(z.string()), z.undefined()]),
    sources: z.union([z.array(z.string()), z.undefined()]),
    origin: z.union([z.string(), z.undefined()]),
    owner: z.union([z.string(), z.undefined()]),
    followers: z.union([z.array(z.string()), z.undefined()]),
    postings: z.union([z.array(z.string()), z.undefined()]),
    createdAt: z.union([z.number(), z.undefined()]),
    archived: z.union([archievedEntrySchema, z.undefined()]),
    contact: z.union([z.array(z.string()), z.undefined()])
});
