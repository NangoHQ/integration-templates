// Generated by ts-to-zod
import { z } from 'zod';

export const recruiterFlowUserSchema = z.object({
    id: z.number(),
    email: z.string(),
    first_name: z.string(),
    last_name: z.string(),
    role: z.array(z.string()),
    img_link: z.union([z.string(), z.undefined()])
});

export const recruiterFlowResumeLinkSchema = z.object({
    filename: z.string(),
    link: z.string()
});

export const recruiterFlowAssociatedJobSchema = z.object({
    job_id: z.number(),
    job_name: z.string(),
    client_company_name: z.string(),
    current_stage_name: z.string(),
    is_open: z.boolean()
});

export const recruiterFlowCustomFieldsSchema = z.record(z.union([z.string(), z.number()]));

export const recruiterFlowCandidateSchema = z.object({
    id: z.number(),
    full_name: z.string(),
    first_name: z.string(),
    last_name: z.string(),
    profile_picture_link: z.union([z.string(), z.undefined()]).optional(),
    added_by_name: z.string(),
    added_by_id: z.number(),
    added_time: z.string(),
    latest_activity_time: z.union([z.string(), z.undefined()]).optional(),
    last_contacted_time: z.union([z.string(), z.undefined()]).optional(),
    email_addresses: z.array(z.string()),
    phone_numbers: z.array(z.string()),
    current_designation: z.union([z.string(), z.undefined()]).optional(),
    current_organization: z.union([z.string(), z.undefined()]).optional(),
    location_city: z.union([z.string(), z.undefined()]).optional(),
    location_country: z.union([z.string(), z.undefined()]).optional(),
    location_full_string: z.union([z.string(), z.undefined()]).optional(),
    source: z.string(),
    status_name: z.union([z.string(), z.undefined()]).optional(),
    linkedin_profile_url: z.union([z.string(), z.undefined()]).optional(),
    github_profile_url: z.union([z.string(), z.undefined()]).optional(),
    twitter_profile_url: z.union([z.string(), z.undefined()]).optional(),
    angellist_profile_url: z.union([z.string(), z.undefined()]).optional(),
    behance_profile_url: z.union([z.string(), z.undefined()]).optional(),
    dribbble_profile_url: z.union([z.string(), z.undefined()]).optional(),
    facebook_profile_url: z.union([z.string(), z.undefined()]).optional(),
    xing_profile_url: z.union([z.string(), z.undefined()]).optional(),
    resume_links: z.union([z.array(recruiterFlowResumeLinkSchema), z.undefined()]).optional(),
    associated_jobs: z.union([z.array(recruiterFlowAssociatedJobSchema), z.undefined()]).optional(),
    custom_fields: z.union([z.array(recruiterFlowCustomFieldsSchema), z.undefined()]).optional()
});

export const recruiterFlowCandidateActivityStageMovementInputSchema = z.object({
    id: z.string(),
    after: z.union([z.string(), z.undefined()]).optional(),
    before: z.union([z.string(), z.undefined()]).optional()
});

export const recruiterFlowTransitionUserSchema = z.object({
    email: z.string(),
    id: z.number(),
    name: z.string()
});

export const recruiterFlowTransitionSchema = z.object({
    entered: z.string(),
    from: z.string().nullable(),
    left: z.string().nullable(),
    stage_moved_by: recruiterFlowTransitionUserSchema,
    to: z.string()
});

export const recruiterFlowJobWithTransitionsSchema = z.object({
    id: z.number(),
    name: z.string(),
    added_by: recruiterFlowTransitionUserSchema,
    transitions: z.array(recruiterFlowTransitionSchema)
});

export const recruiterFlowCandidateActivityStageMovementSchema = z.object({
    id: z.number(),
    jobs: z.array(recruiterFlowJobWithTransitionsSchema),
    name: z.string()
});

export const recruiterFlowCandidateActivityStageMovementOutputSchema = z.object({
    data: z.array(recruiterFlowCandidateActivityStageMovementSchema)
});

export const recruiterFlowCandidateActivityTypeSchema = z.object({
    category: z.string(),
    id: z.number(),
    is_archived: z.boolean(),
    is_custom: z.boolean(),
    name: z.string(),
    rank: z.number(),
    track_last_contacted: z.boolean(),
    track_last_engaged: z.boolean()
});

export const recruiterFlowCandidateActivityListInputSchema = z.object({
    id: z.string()
});

export const recruiterFlowLeanCandidateSchema = z.object({
    id: z.number(),
    name: z.string()
});

export const recruiterFlowLeanJobSchema = z.object({
    id: z.number(),
    name: z.string()
});

export const recruiterFlowCandidateActivityListAssociatedEntitiesSchema = z.object({
    candidates: z.array(recruiterFlowLeanCandidateSchema),
    clients: z.array(z.any()),
    contacts: z.array(z.any()),
    deals: z.array(z.any()),
    jobs: z.array(recruiterFlowLeanJobSchema)
});

export const recruiterFlowCandidateActivityListTypeSchema = z.object({
    id: z.number(),
    name: z.string()
});

export const recruiterFlowCandidateActivityListCandidateSchema = z.object({
    email: z.string(),
    first_name: z.string(),
    id: z.number(),
    last_name: z.string(),
    name: z.string()
});

export const recruiterFlowCandidateFullActivitySchema = z.object({
    id: z.number(),
    associated_entities: recruiterFlowCandidateActivityListAssociatedEntitiesSchema,
    candidate_id: z.number(),
    contact_id: z.number().nullable(),
    interview_plan_id: z.number().nullable(),
    is_custom: z.boolean(),
    job_id: z.number(),
    subject: z.string(),
    text: z.string(),
    time: z.string(),
    type: recruiterFlowCandidateActivityListTypeSchema,
    user: recruiterFlowCandidateActivityListCandidateSchema
});

export const recruiterFlowCandidateActivityListOutputSchema = z.object({
    data: z.array(recruiterFlowCandidateFullActivitySchema)
});

export const recruiterFlowScorecardAttributeCategorySchema = z.object({
    name: z.string()
});

export const recruiterFlowScorecardAttributeSchema = z.object({
    category: recruiterFlowScorecardAttributeCategorySchema,
    name: z.string(),
    notes: z.union([z.string(), z.undefined()]),
    rank: z.number(),
    rating: z.number()
});

export const recruiterFlowScorecardQuestionSchema = z.object({
    category_name: z.string(),
    id: z.number(),
    response: z.string(),
    text: z.string()
});

export const recruiterFlowScorecardSchema = z.object({
    attributes: z.array(recruiterFlowScorecardAttributeSchema),
    bottomline: z.string(),
    first_name: z.string(),
    id: z.number(),
    last_name: z.string(),
    middle_name: z.string(),
    name: z.string(),
    notes: z.union([z.string(), z.undefined()]),
    questions: z.array(recruiterFlowScorecardQuestionSchema),
    result_id: z.number(),
    submission_time: z.string(),
    user_id: z.number()
});

export const recruiterFlowScorecardStageSchema = z.object({
    id: z.number(),
    name: z.string(),
    scorecard: z.array(recruiterFlowScorecardSchema)
});

export const recruiterFlowScorecardJobSchema = z.object({
    id: z.number(),
    name: z.string(),
    stages: z.array(recruiterFlowScorecardStageSchema)
});

export const recruiterFlowCandidateScorecardSchema = z.object({
    candidate: recruiterFlowLeanCandidateSchema,
    job: recruiterFlowScorecardJobSchema
});

export const recruiterFlowCandidateScorecardInputSchema = z.object({
    id: z.string(),
    job_id: z.string()
});

export const recruiterFlowJobLocationSchema = z.object({
    id: z.number(),
    name: z.string(),
    city: z.union([z.string(), z.undefined()]),
    country: z.union([z.string(), z.undefined()])
});

export const recruiterFlowJobSchema = z.object({
    id: z.number(),
    title: z.string(),
    apply_link: z.string(),
    company_name: z.string(),
    company_logo_link: z.union([z.string(), z.undefined()]).optional(),
    locations: z.array(recruiterFlowJobLocationSchema),
    department: z.string(),
    employment_type: z.string(),
    job_type_name: z.string(),
    experience_range_start: z.number(),
    experience_range_end: z.number(),
    is_open: z.boolean(),
    job_status_name: z.string(),
    number_of_openings: z.number(),
    salary_range_end: z.union([z.number(), z.undefined()]).optional(),
    salary_range_start: z.union([z.number(), z.undefined()]).optional(),
    salary_range_currency: z.union([z.string(), z.undefined()]).optional(),
    salary_frequency: z.union([z.string(), z.undefined()]).optional(),
    pay_rate_number: z.union([z.string(), z.undefined()]).optional(),
    pay_rate_currency: z.union([z.string(), z.undefined()]).optional(),
    pay_rate_frequency_display_name: z.union([z.string(), z.undefined()]).optional(),
    bill_rate_number: z.union([z.string(), z.undefined()]).optional(),
    bill_rate_currency: z.union([z.string(), z.undefined()]).optional(),
    bill_rate_frequency_display_name: z.union([z.string(), z.undefined()]).optional(),
    contract_start_date: z.union([z.string(), z.undefined()]).optional(),
    contract_end_date: z.union([z.string(), z.undefined()]).optional(),
    work_quantum_number: z.union([z.string(), z.undefined()]).optional(),
    work_quantum_unit_display_name: z.union([z.string(), z.undefined()]).optional(),
    work_quantum_frequency_display_name: z.union([z.string(), z.undefined()]).optional(),
    work_quantum_is_full_time: z.union([z.boolean(), z.undefined()]).optional(),
    expected_salary_number: z.union([z.number(), z.undefined()]).optional(),
    expected_salary_currency: z.union([z.string(), z.undefined()]).optional(),
    expected_fee_number: z.union([z.number(), z.undefined()]).optional(),
    expected_fee_currency: z.union([z.string(), z.undefined()]).optional(),
    commission_rate: z.union([z.number(), z.undefined()]).optional(),
    expected_start_date: z.union([z.string(), z.undefined()]).optional(),
    expected_end_date: z.union([z.string(), z.undefined()]).optional(),
    custom_fields: z.union([z.array(recruiterFlowCustomFieldsSchema), z.undefined()]).optional(),
    files_links: z.union([z.array(z.string()), z.undefined()]).optional()
});

export const recruiterFlowJobPipelineSummarySchema = z.object({
    id: z.number(),
    name: z.string(),
    count: z.number()
});

export const recruiterFlowJobPipelineSchema = z.object({
    detail: z.array(z.any()),
    summary: z.array(recruiterFlowJobPipelineSummarySchema)
});

export const recruiterFlowLeanJobStageNameSchema = z.object({
    id: z.string(),
    name: z.string()
});

export const recruiterFlowJobDepartmentSchema = z.object({
    id: z.number(),
    name: z.string(),
    count: z.number()
});

export const recruiterFlowJobStatusSchema = z.object({
    id: z.number(),
    name: z.string(),
    color: z.string()
});

export const recruiterFlowJobRemoteStatusSchema = z.object({
    id: z.number(),
    name: z.string()
});

export const recruiterFlowLocationSchema = z.object({
    id: z.number(),
    name: z.string(),
    city: z.union([z.string(), z.undefined()]),
    country: z.union([z.string(), z.undefined()]),
    details: z.union([z.string(), z.undefined()]),
    iso_3166_1_alpha_2_code: z.union([z.string(), z.undefined()]),
    location_type: z.string(),
    location_type_id: z.number(),
    postal_code: z.union([z.string(), z.undefined()]),
    state: z.union([z.string(), z.undefined()]),
    zipcode: z.union([z.string(), z.undefined()])
});

export const recruiterFlowEmploymentTypeSchema = z.object({
    id: z.number(),
    name: z.string()
});

export const recruiterFlowOrganizationLocationSchema = z.object({
    id: z.number(),
    name: z.string(),
    address: z.union([z.string(), z.undefined()]),
    city: z.union([z.string(), z.undefined()]),
    state: z.union([z.string(), z.undefined()]),
    country: z.union([z.string(), z.undefined()]),
    postal_code: z.union([z.string(), z.undefined()])
});

export const recruiterFlowScoresSchema = z.record(z.number());

export const recruiterFlowPipelineInputSchema = z.object({
    job_id: z.string()
});
