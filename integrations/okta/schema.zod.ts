// Generated by ts-to-zod
import { z } from "zod";

export const actionResponseErrorSchema = z.object({
  message: z.string(),
});

export const oktaAddGroupSchema = z.object({
  description: z.union([z.string(), z.undefined()]).optional(),
  name: z.string(),
});

export const oktaUserGroupProfileSchema = z.object({
  description: z.string().nullable(),
  name: z.string(),
});

export const oktaActiveDirectoryGroupProfileSchema = z.object({
  description: z.string(),
  dn: z.string(),
  externalId: z.string(),
  name: z.string(),
  samAccountName: z.string(),
  windowsDomainQualifiedName: z.string(),
});

export const groupSchema = z.object({
  id: z.string(),
  created: z.string(),
  lastMembershipUpdated: z.string(),
  lastUpdated: z.string(),
  objectClass: z.array(z.string()),
  type: z.union([
    z.literal("APP_GROUP"),
    z.literal("BUILT_IN"),
    z.literal("OKTA_GROUP"),
  ]),
  profile: z.union([
    oktaUserGroupProfileSchema,
    oktaActiveDirectoryGroupProfileSchema,
  ]),
});

export const oktaAssignRemoveUserGroupSchema = z.object({
  groupId: z.string(),
  userId: z.string(),
});

export const successResponseSchema = z.object({
  success: z.boolean(),
});

export const oktaCreateUserSchema = z.object({
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  login: z.string(),
  mobilePhone: z.union([z.string(), z.undefined()]).optional().nullable(),
});

export const userSchema = z.object({
  id: z.string(),
  status: z.string(),
  created: z.string(),
  activated: z.string(),
  statusChanged: z.string(),
  lastLogin: z.string().nullable(),
  lastUpdated: z.string(),
  passwordChanged: z.string().nullable(),
  type: z.object({
    id: z.string(),
  }),
  profile: z.object({
    firstName: z.string().nullable(),
    lastName: z.string().nullable(),
    mobilePhone: z.string().nullable(),
    secondEmail: z.string().nullable(),
    login: z.string(),
    email: z.string(),
  }),
});
