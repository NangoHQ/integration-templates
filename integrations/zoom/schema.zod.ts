// Generated by ts-to-zod
import { z } from 'zod';

export const idEntitySchema = z.object({
    id: z.string()
});

export const successResponseSchema = z.object({
    success: z.boolean()
});

export const actionResponseErrorSchema = z.object({
    message: z.string()
});

export const createUserSchema = z.object({
    firstName: z.string(),
    lastName: z.string(),
    email: z.string()
});

export const zoomCreateUserSchema = z.object({
    firstName: z.string(),
    lastName: z.string(),
    email: z.string(),
    action: z.union([z.literal('create'), z.literal('autoCreate'), z.literal('custCreate'), z.literal('ssoCreate')]).optional(),
    display_name: z.string().optional(),
    type: z.union([z.literal('basic'), z.literal('licensed'), z.literal('UnassignedWithoutMeetingsBasic'), z.literal('None')]).optional()
});

export const userSchema = z.object({
    id: z.string(),
    firstName: z.string(),
    lastName: z.string(),
    email: z.string()
});

export const meetingSchema = z.object({
    id: z.string()
});

export const createMeetingSchema = z.object({
    id: z.string()
});
