import { describe, expect, test } from 'vitest';
// @ts-ignore - Schema file is generated by Nango
import type { ConfluencePage } from '../.nango/schema.js';
import type { PageResponse } from '../types.js';
import fetchData from '../syncs/pages.js';

describe('Confluence Pages Pagination', () => {
    test('should configure offset-based pagination correctly', async () => {
        const mockPage: PageResponse = {
            id: '123',
            title: 'Test Page',
            status: 'current',
            authorId: 'author123',
            createdAt: '2024-01-01T00:00:00.000Z',
            spaceId: 'space123',
            parentId: 'parent123',
            parentType: 'page',
            position: 1,
            version: {
                createdAt: '2024-01-01T00:00:00.000Z',
                message: 'Initial version',
                number: 1,
                minorEdit: false,
                authorId: 'author123'
            },
            body: {
                storage: {
                    representation: 'storage',
                    value: 'Test format'
                }
            }
        };

        let paginationConfig: any = null;
        let savedPages: ConfluencePage[] = [];
        let cloudIdCalled = false;

        const nango = {
            paginate: async function* <T>(config: any) {
                paginationConfig = config;
                yield [mockPage];
            },
            get: async (config: any) => {
                if (config.endpoint === 'oauth/token/accessible-resources') {
                    cloudIdCalled = true;
                    return { data: [{ id: 'cloud123' }] };
                }
                return { data: [] };
            },
            batchSave: async (pages: ConfluencePage[], model: string) => {
                savedPages = pages;
            },
            log: async (message: string) => {}
        };

        await fetchData.exec(nango as any);

        expect(cloudIdCalled).toBe(true);
        expect(paginationConfig).toBeDefined();
        expect(paginationConfig.baseUrlOverride).toBe('https://api.atlassian.com/ex/confluence/cloud123');
        expect(paginationConfig.endpoint).toBe('/wiki/api/v2/pages');
        expect(paginationConfig.paginate).toEqual({
            limit: 100
        });

        expect(savedPages).toHaveLength(1);
        expect(savedPages[0]).toEqual({
            id: '123',
            title: 'Test Page',
            status: 'current',
            authorId: 'author123',
            createdAt: '2024-01-01T00:00:00.000Z',
            spaceId: 'space123',
            parentId: 'parent123',
            parentType: 'page',
            position: 1,
            version: {
                createdAt: '2024-01-01T00:00:00.000Z',
                message: 'Initial version',
                number: 1,
                minorEdit: false,
                authorId: 'author123'
            },
            body: {
                storage: {
                    representation: 'storage',
                    value: 'Test format'
                }
            }
        });
    });

    test('should handle empty pages', async () => {
        let paginationConfig: any = null;

        const nango = {
            paginate: async function* <T>(config: any) {
                paginationConfig = config;
                yield [];
            },
            get: async (config: any) => {
                return { data: [{ id: 'cloud123' }] };
            },
            batchSave: async (pages: ConfluencePage[], model: string) => {},
            log: async (message: string) => {}
        };

        await fetchData.exec(nango as any);

        expect(paginationConfig).toBeDefined();
        expect(paginationConfig.paginate.limit).toBe(100);
    });

    test('should handle pagination errors', async () => {
        const nango = {
            paginate: async function* <T>(config: any) {
                throw new Error('Pagination failed');
            },
            get: async (config: any) => {
                return { data: [{ id: 'cloud123' }] };
            },
            batchSave: async (pages: ConfluencePage[], model: string) => {},
            log: async (message: string) => {}
        };

        await expect(fetchData.exec(nango as any)).rejects.toThrow('Pagination failed');
    });
});
