[
    {
        "providerConfigKey": "notion",
        "syncs": [
            {
                "name": "content-metadata",
                "type": "sync",
                "description": "Sync pages and databases metadata to further fetch the content\nusing a dedicated action",
                "sync_type": "full",
                "usedModels": ["ContentMetadata"],
                "runs": "every 1h",
                "version": "1.0.1",
                "track_deletes": true,
                "auto_start": true,
                "input": null,
                "output": ["ContentMetadata"],
                "scopes": [],
                "endpoints": [
                    {
                        "method": "GET",
                        "path": "/contents",
                        "group": "Contents"
                    }
                ],
                "webhookSubscriptions": []
            },
            {
                "name": "users",
                "type": "sync",
                "description": "Fetches a list of users from Notion",
                "sync_type": "full",
                "usedModels": ["User"],
                "runs": "every day",
                "version": "",
                "track_deletes": true,
                "auto_start": true,
                "input": null,
                "output": ["User"],
                "scopes": [],
                "endpoints": [
                    {
                        "method": "GET",
                        "path": "/users",
                        "group": "Users"
                    }
                ],
                "webhookSubscriptions": []
            },
            {
                "name": "databases",
                "type": "sync",
                "description": "Sync a database content with each row as an entry. Store the top level\ndatabase information in the metadata to be able to reconcile the database",
                "sync_type": "full",
                "usedModels": ["NotionCompleteDatabase"],
                "runs": "every 1h",
                "version": "1.0.1",
                "track_deletes": true,
                "auto_start": true,
                "input": null,
                "output": ["NotionCompleteDatabase"],
                "scopes": [],
                "endpoints": [
                    {
                        "method": "GET",
                        "path": "/databases",
                        "group": "Databases"
                    }
                ],
                "webhookSubscriptions": []
            }
        ],
        "actions": [
            {
                "name": "fetch-rich-page",
                "type": "action",
                "description": "Fetch a specific page in Notion by passing a pageId. This action fetches a page,\nand its content and converts it into a full markdown. It transforms images,\ntables, uploaded files, etc., into their markdown counterparts, providing a complete markdown.",
                "version": "1.0.1",
                "scopes": [],
                "input": "RichPageInput",
                "output": ["RichPage"],
                "usedModels": ["RichPage", "RichPageInput"],
                "endpoint": {
                    "method": "GET",
                    "path": "/pages/single",
                    "group": "Pages"
                }
            },
            {
                "name": "fetch-database",
                "type": "action",
                "description": "Fetch a specific Notion database by passing in the database id. This action fetches the database and outputs an object. Note that this should be used for small databases.",
                "version": "1.0.2",
                "scopes": [],
                "input": "DatabaseInput",
                "output": ["Database"],
                "usedModels": ["Database", "RowEntry", "DatabaseInput"],
                "endpoint": {
                    "method": "GET",
                    "path": "/databases/single",
                    "group": "Databases"
                }
            },
            {
                "name": "fetch-content-metadata",
                "type": "action",
                "description": "Retrieve the entity type as well as an id for a Notion entity to later call\nfetch-database or fetch-rich-page based on the type.",
                "version": "1.0.1",
                "scopes": [],
                "input": "UrlOrId",
                "output": ["ContentMetadata"],
                "usedModels": ["ContentMetadata", "UrlOrId"],
                "endpoint": {
                    "method": "GET",
                    "path": "/contents/single",
                    "group": "Contents"
                }
            },
            {
                "name": "create-database-row",
                "type": "action",
                "description": "Create a new row in a specified Notion database. \nThe properties are mapped to Notion-compatible formats based on the database schema. \nSupported property types include:\n- `title` (string): Creates a title property.\n- `select` (string): Creates a select property.\n- `multi_select` (array of strings): Creates a multi-select property.\n- `status` (string): Creates a status property.\n- `date` (string or object): Supports ISO date strings or objects with a `start` field.\n- `checkbox` (boolean): Creates a checkbox property.\n- `number` (number): Creates a number property.\n- `url` (string): Creates a URL property.\n- `email` (string): Creates an email property.\n- `phone_number` (string): Creates a phone number property.\n- `rich_text` (string): Creates a rich text property.\n- `relation` (array of IDs): Creates a relation property.",
                "version": "1.0.1",
                "scopes": [],
                "input": "CreateDatabaseRowInput",
                "output": ["CreateDatabaseRowOutput"],
                "usedModels": ["CreateDatabaseRowOutput", "Property", "CreateDatabaseRowInput"],
                "endpoint": {
                    "method": "POST",
                    "path": "/databases/row",
                    "group": "Databases"
                }
            }
        ],
        "onEventScripts": {
            "post-connection-creation": [],
            "pre-connection-deletion": []
        }
    }
]
