import { describe, expect, test } from 'vitest';
// @ts-ignore - Schema file is generated by Nango
import type { User } from '../.nango/schema';
import type { NotionUser } from '../types';
import fetchData from '../syncs/users.js';

describe('Notion Users Pagination', () => {
    test('should configure cursor-based pagination correctly', async () => {
        const mockUser: NotionUser = {
            object: 'user',
            id: 'user123',
            name: 'John Doe',
            avatar_url: null,
            type: 'person',
            person: {
                email: 'john.doe@example.com'
            }
        };

        let paginationConfig: any = null;
        let savedUsers: User[] = [];

        const nango = {
            paginate: async function* <T>(config: any) {
                paginationConfig = config;
                yield [mockUser];
            },
            batchSave: async (users: User[], model: string) => {
                savedUsers = users;
            }
        };

        await fetchData(nango as any);

        expect(paginationConfig).toBeDefined();
        expect(paginationConfig.endpoint).toBe('/v1/users');
        expect(paginationConfig.retries).toBe(10);

        expect(savedUsers).toHaveLength(1);
        expect(savedUsers[0]).toEqual({
            id: 'user123',
            firstName: 'John',
            lastName: 'Doe',
            email: 'john.doe@example.com',
            isBot: false
        });
    });

    test('should handle empty pages', async () => {
        let paginationConfig: any = null;

        const nango = {
            paginate: async function* <T>(config: any) {
                paginationConfig = config;
                yield [];
            },
            batchSave: async (users: User[], model: string) => {}
        };

        await fetchData(nango as any);

        expect(paginationConfig).toBeDefined();
        expect(paginationConfig.endpoint).toBe('/v1/users');
    });

    test('should handle pagination errors', async () => {
        const nango = {
            paginate: async function* <T>(config: any) {
                throw new Error('Pagination failed');
            },
            batchSave: async (users: User[], model: string) => {}
        };

        await expect(fetchData(nango as any)).rejects.toThrow('Pagination failed');
    });
});
