// Generated by ts-to-zod
import { z } from 'zod';

export const idEntitySchema = z.object({
    id: z.string()
});

export const emailEntitySchema = z.object({
    email: z.string()
});

export const successResponseSchema = z.object({
    success: z.boolean()
});

export const createUserSchema = z.object({
    firstName: z.string(),
    lastName: z.string(),
    email: z.string(),
    role: z.union([z.literal('admin'), z.literal('agent')]).optional()
});

export const userSchema = z.object({
    id: z.string(),
    firstName: z.string(),
    lastName: z.string(),
    email: z.string()
});

export const categoryCreateSchema = z.object({
    category: z.object({
        name: z.string(),
        description: z.string().optional()
    })
});

export const categorySchema = z.object({
    id: z.string(),
    url: z.string(),
    name: z.string(),
    description: z.string()
});

export const sectionCreateSchema = z.object({
    category_id: z.number(),
    section: z.object({
        name: z.string(),
        description: z.string().optional()
    })
});

export const sectionSchema = z.object({
    id: z.string(),
    url: z.string(),
    category_id: z.number(),
    name: z.string(),
    description: z.string()
});

export const articleLiteSchema = z.object({
    title: z.string(),
    id: z.string(),
    url: z.string()
});

export const articleResponseSchema = z.object({
    articles: z.array(articleLiteSchema)
});

export const articleSchema = z.object({
    title: z.string(),
    id: z.number(),
    url: z.string(),
    locale: z.string(),
    user_segment_id: z.number().nullable(),
    permission_group_id: z.number(),
    author_id: z.number(),
    body: z.string(),
    comments_disabled: z.boolean(),
    content_tag_ids: z.array(z.number()),
    created_at: z.string(),
    draft: z.boolean(),
    edited_at: z.string(),
    html_url: z.string(),
    label_names: z.array(z.string()),
    outdated: z.boolean(),
    outdated_locales: z.array(z.string()),
    position: z.number(),
    promoted: z.boolean(),
    section_id: z.number(),
    source_locale: z.string(),
    updated_at: z.string(),
    vote_count: z.number(),
    vote_sum: z.number()
});

export const singleArticleResponseSchema = z.object({
    article: articleSchema
});

export const articleInputSchema = z.object({
    id: z.string()
});

export const ticketCreateSchema = z.object({
    ticket: z.object({
        comment: z.object({
            body: z.string().optional(),
            html_body: z.string().optional()
        }),
        assignee_email: z.string().optional(),
        assignee_id: z.number().optional(),
        brand_id: z.number().optional(),
        due_at: z.string().optional(),
        type: z.union([z.literal('problem'), z.literal('incident'), z.literal('question'), z.literal('task')]).optional(),
        status: z.union([z.literal('new'), z.literal('open'), z.literal('pending'), z.literal('hold'), z.literal('solved'), z.literal('closed.')]).optional(),
        metadata: z.record(z.any()).optional()
    })
});

export const createdTicketSchema = z.object({
    id: z.string(),
    url: z.string(),
    created_at: z.string(),
    updated_at: z.string(),
    subject: z.string().nullable(),
    description: z.string(),
    priority: z.string().nullable(),
    status: z.string()
});

export const ticketSchema = z.object({
    requester_id: z.number(),
    allow_attachments: z.boolean(),
    allow_channelback: z.boolean(),
    assignee_email: z.string(),
    assignee_id: z.number(),
    attribute_value_ids: z.array(z.number()),
    brand_id: z.number(),
    collaborator_ids: z.array(z.number()),
    collaborators: z.array(z.any()),
    comment: z.record(z.any()),
    created_at: z.string(),
    custom_fields: z.array(z.any()),
    custom_status_id: z.number(),
    description: z.string(),
    due_at: z.string(),
    email_cc_ids: z.array(z.number()),
    email_ccs: z.record(z.any()),
    external_id: z.string(),
    follower_ids: z.array(z.number()),
    followers: z.record(z.any()),
    followup_ids: z.array(z.number()),
    forum_topic_id: z.number(),
    from_messaging_channel: z.boolean(),
    group_id: z.number(),
    has_incidents: z.boolean(),
    id: z.number(),
    is_public: z.boolean(),
    macro_id: z.number(),
    macro_ids: z.array(z.number()),
    metadata: z.record(z.any()),
    organization_id: z.number(),
    priority: z.string(),
    problem_id: z.number(),
    raw_subject: z.string(),
    recipient: z.string(),
    requester: z.record(z.any()),
    safe_update: z.boolean(),
    satisfaction_rating: z.object({
        aliqua38: z.number()
    }),
    sharing_agreement_ids: z.array(z.number()),
    status: z.string(),
    subject: z.string(),
    submitter_id: z.number(),
    tags: z.array(z.string()),
    ticket_form_id: z.number(),
    type: z.string(),
    updated_at: z.string(),
    updated_stamp: z.string(),
    url: z.string(),
    via: z.object({
        channel: z.string(),
        source: z.object({
            eu__4: z.number(),
            id__8f: z.string()
        })
    }),
    via_followup_source_id: z.number(),
    via_id: z.number(),
    voice_comment: z.record(z.any())
});

export const searchTicketInputSchema = z.object({
    query: z.string()
});

export const searchTicketSchema = z.object({
    id: z.string(),
    url: z.string(),
    external_id: z.string().nullable(),
    requester_id: z.string(),
    requester_name: z.string(),
    assignee_id: z.string().nullable(),
    assignee_name: z.string().nullable(),
    assignee_avatar: z.string().nullable(),
    status: z.string(),
    created_at: z.string(),
    updated_at: z.string(),
    is_public: z.boolean(),
    subject: z.string().nullable(),
    description: z.string(),
    priority: z.string().nullable(),
    tags: z.array(z.string())
});

export const searchTicketOutputSchema = z.object({
    tickets: z.array(searchTicketSchema)
});
