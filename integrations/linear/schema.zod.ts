// Generated by ts-to-zod
// @ts-nocheck
import { z } from 'zod';
import type { Field } from '../models.js';

export const linearIssueSchema = z.object({
    id: z.string(),
    assigneeId: z.string().nullable(),
    creatorId: z.string().nullable(),
    createdAt: z.string(),
    updatedAt: z.string(),
    description: z.string().nullable(),
    dueDate: z.string().nullable(),
    projectId: z.string().nullable(),
    teamId: z.string(),
    title: z.string(),
    status: z.string(),
    estimate: z.string().nullable()
});

export const createIssueSchema = z.object({
    teamId: z.string(),
    title: z.string(),
    description: z.string().optional(),
    projectId: z.string().optional(),
    milestoneId: z.string().optional(),
    assigneeId: z.string().optional(),
    priority: z.number().optional(),
    parentId: z.string().optional(),
    estimate: z.number().optional(),
    dueDate: z.string().optional()
});

export const linearTeamSchema = z.object({
    id: z.string(),
    name: z.string(),
    description: z.string().nullable(),
    createdAt: z.string(),
    updatedAt: z.string()
});

export const linearUserSchema = z.object({
    id: z.string(),
    admin: z.boolean(),
    email: z.string(),
    firstName: z.string(),
    lastName: z.string().optional(),
    avatarUrl: z.string().nullable()
});

export const linearProjectSchema = z.object({
    id: z.string(),
    url: z.string(),
    name: z.string(),
    description: z.string().nullable(),
    createdAt: z.string(),
    updatedAt: z.string(),
    teamId: z.string()
});

export const linearRoadmapSchema = z.object({
    id: z.string(),
    name: z.string(),
    description: z.string().nullable(),
    createdAt: z.string(),
    updatedAt: z.string(),
    teamId: z.string(),
    projectIds: z.string()
});

export const linearMilestoneSchema = z.object({
    id: z.string(),
    name: z.string(),
    progress: z.number(),
    description: z.string().nullable(),
    createdAt: z.string(),
    updatedAt: z.string(),
    status: z.string(),
    project: z.object({
        id: z.string(),
        name: z.string()
    })
});

export const teamsPaginatedResponseSchema = z.object({
    teams: z.array(
        z.object({
            id: z.string(),
            name: z.string()
        })
    ),
    pageInfo: z.object({
        hasNextPage: z.boolean(),
        endCursor: z.string().nullable()
    })
});

export const fetchTeamsInputSchema = z.object({
    after: z.string().optional(),
    pageSize: z.number().optional()
});

export const entitySchema = z.object({
    name: z.string()
});

export const fieldSchema: z.ZodSchema<Field> = z.lazy(() => z.record(z.union([fieldSchema, z.string()])));

export const fieldResponseSchema = z.object({
    fields: z.array(fieldSchema)
});

export const modelSchema = z.object({
    name: z.string()
});

export const modelResponseSchema = z.object({
    models: z.array(modelSchema)
});
