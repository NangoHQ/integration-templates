// Generated by ts-to-zod
import { z } from 'zod';

export const successResponseSchema = z.object({
    response: z.boolean()
});

export const tableViewSchema = z.object({
    id: z.string(),
    name: z.string(),
    type: z.string()
});

export const tableFieldSchema = z.object({
    id: z.string(),
    description: z.string(),
    name: z.string(),
    type: z.string(),
    options: z.record(z.any()).optional()
});

export const tableSchema = z.object({
    baseId: z.string(),
    baseName: z.string(),
    id: z.string(),
    name: z.string(),
    views: z.array(tableViewSchema),
    fields: z.array(tableFieldSchema),
    primaryFieldId: z.string()
});

export const baseSchema = z.object({
    id: z.string(),
    name: z.string(),
    permissionLevel: z.union([z.literal('none'), z.literal('read'), z.literal('comment'), z.literal('edit'), z.literal('create')])
});

export const baseIdSchema = z.object({
    baseId: z.string()
});

export const webhookSpecificationSchema = z.object({
    options: z.object({
        filters: z.object({
            recordChangeScope: z.string().optional(),
            dataTypes: z.array(z.string()),
            changeTypes: z.array(z.string()).optional(),
            fromSources: z.array(z.string()).optional(),
            sourceOptions: z
                .object({
                    formPageSubmission: z
                        .object({
                            pageId: z.string()
                        })
                        .optional(),
                    formSubmission: z
                        .object({
                            viewId: z.string()
                        })
                        .optional()
                })
                .optional(),
            watchDataInFieldIds: z.array(z.string()).optional(),
            watchSchemasOfFieldIds: z.array(z.string()).optional()
        }),
        includes: z
            .object({
                includeCellValuesInFieldIds: z.union([z.array(z.string()), z.literal('all')]).optional(),
                'includePreviousCellValues:': z.boolean().optional(),
                includePreviousFieldDefinitions: z.boolean().optional()
            })
            .optional()
    })
});

export const notificationResultSchema = z.object({
    success: z.boolean(),
    error: z
        .object({
            message: z.string()
        })
        .optional(),
    completionTimestamp: z.string().optional(),
    durationMs: z.number().optional(),
    retryNumber: z.number().optional(),
    willBeRetried: z.boolean().optional()
});

export const webhookSchema = z.object({
    id: z.string(),
    areNotificationsEnabled: z.boolean(),
    cursorForNextPayload: z.number(),
    isHookEnabled: z.boolean(),
    lastSuccessfulNotificationTime: z.string().nullable(),
    expirationTime: z.union([z.string(), z.undefined()]).optional(),
    specification: webhookSpecificationSchema,
    lastNotificationResult: notificationResultSchema.nullable()
});

export const webhookResponseSchema = z.object({
    webhooks: z.array(webhookSchema)
});

export const createWebhookSchema = z.object({
    baseId: z.string(),
    specification: webhookSpecificationSchema
});

export const webhookCreatedSchema = z.object({
    id: z.string(),
    expirationTime: z.string()
});

export const deleteWebhookSchema = z.object({
    baseId: z.string(),
    webhookId: z.string()
});
