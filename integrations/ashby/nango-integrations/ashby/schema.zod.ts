// Generated by ts-to-zod
import { z } from 'zod';

export const ashbyCandidateSchema = z.object({
    id: z.string(),
    createdAt: z.date(),
    name: z.string(),
    primaryEmailAddress: z.object({
        value: z.string(),
        type: z.string(),
        isPrimary: z.boolean()
    }),
    emailAddresses: z.array(z.string()),
    primaryPhoneNumber: z.object({
        value: z.string(),
        type: z.string(),
        isPrimary: z.boolean()
    }),
    phoneNumbers: z.array(z.string()),
    socialLinks: z.array(z.string()),
    tags: z.array(z.string()),
    position: z.string(),
    company: z.string(),
    school: z.string(),
    applicationIds: z.array(z.string()),
    resumeFileHandle: z.object({
        id: z.string(),
        name: z.string(),
        handle: z.string()
    }),
    fileHandles: z.array(z.string()),
    customFields: z.array(z.string()),
    profileUrl: z.string(),
    source: z.object({
        id: z.string(),
        title: z.string(),
        isArchived: z.boolean(),
        sourceType: z.object({
            id: z.string(),
            title: z.string(),
            isArchived: z.boolean()
        })
    }),
    creditedToUser: z.object({
        id: z.string(),
        firstName: z.string(),
        lastName: z.string(),
        email: z.string(),
        globalRole: z.string(),
        isEnabled: z.boolean(),
        updatedAt: z.date()
    })
});

export const ashbyJobSchema = z.object({
    id: z.string(),
    title: z.string(),
    confidential: z.boolean(),
    status: z.string(),
    employmentType: z.string(),
    locationId: z.string(),
    departmentId: z.string(),
    defaultInterviewPlanId: z.string(),
    interviewPlanIds: z.array(z.string()),
    customFields: z.array(z.string()),
    jobPostingIds: z.array(z.string()),
    customRequisitionId: z.string(),
    hiringTeam: z.array(z.string()),
    updatedAt: z.date(),
    location: z.object({
        id: z.string(),
        name: z.string(),
        isArchived: z.boolean(),
        address: z.object({
            postalAddress: z.object({
                addressCountry: z.string(),
                addressRegion: z.string(),
                addressLocality: z.string()
            })
        }),
        isRemote: z.boolean()
    }),
    openings: z.array(z.string())
});

export const ashbyCreateApplicationResponseSchema = z.object({
    id: z.string(),
    createdAt: z.date(),
    updatedAt: z.date(),
    status: z.string(),
    customFields: z.array(z.string()),
    candidate: z.object({
        id: z.string(),
        name: z.string(),
        primaryEmailAddress: z.object({
            value: z.string(),
            type: z.string(),
            isPrimary: z.boolean()
        }),
        primaryPhoneNumber: z.object({
            value: z.string(),
            type: z.string(),
            isPrimary: z.boolean()
        })
    }),
    currentInterviewStage: z.object({
        id: z.string(),
        title: z.string(),
        type: z.string(),
        orderInInterviewPlan: z.number(),
        interviewPlanId: z.string()
    }),
    source: z.object({
        id: z.string(),
        title: z.string(),
        isArchived: z.boolean(),
        sourceType: z.object({
            id: z.string(),
            title: z.string(),
            isArchived: z.boolean()
        })
    }),
    archiveReason: z.object({
        id: z.string(),
        text: z.string(),
        reasonType: z.string(),
        isArchived: z.boolean()
    }),
    job: z.object({
        id: z.string(),
        title: z.string(),
        locationId: z.string(),
        departmentId: z.string()
    }),
    creditedToUser: z.object({
        id: z.string(),
        firstName: z.string(),
        lastName: z.string(),
        email: z.string(),
        globalRole: z.string(),
        isEnabled: z.boolean(),
        updatedAt: z.date()
    }),
    hiringTeam: z.array(z.string()),
    appliedViaJobPostingId: z.string()
});

export const ashbyCreateNoteResponseSchema = z.object({
    id: z.string(),
    createdAt: z.date(),
    content: z.string(),
    author: z.object({
        id: z.string(),
        firstName: z.string(),
        lastName: z.string(),
        email: z.string()
    })
});

export const ashbyCreateCandidateInputSchema = z.object({
    candidateId: z.string(),
    jobId: z.string(),
    interviewPlanId: z.union([z.string(), z.undefined()]),
    interviewStageId: z.union([z.string(), z.undefined()]),
    sourceId: z.union([z.string(), z.undefined()]),
    creditedToUserId: z.union([z.string(), z.undefined()])
});

export const noteObjectSchema = z.object({
    value: z.string(),
    type: z.string()
});

export const ashbyCreateNoteInputSchema = z.object({
    candidateId: z.string(),
    note: z.union([z.string(), noteObjectSchema]),
    sendNotifications: z.union([z.boolean(), z.undefined()])
});
