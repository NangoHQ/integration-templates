// Generated by ts-to-zod
import { z } from 'zod';

export const idEntitySchema = z.object({
    id: z.string()
});

export const successResponseSchema = z.object({
    success: z.boolean()
});

export const idSchema = z.object({
    id: z.string()
});

export const timestampsSchema = z.object({
    updatedAt: z.string(),
    createdAt: z.string()
});

export const optionalObjectTypeSchema = z.object({
    objectType: z.string().optional()
});

export const inputPropertySchema = z.object({
    name: z.string()
});

export const optionSchema = z.object({
    label: z.string(),
    value: z.string(),
    displayOrder: z.number(),
    hidden: z.boolean()
});

export const propertySchema = z.object({
    updatedAt: z.string(),
    createdAt: z.string(),
    name: z.string(),
    label: z.string(),
    type: z.string(),
    fieldType: z.string(),
    description: z.string(),
    groupName: z.string(),
    options: z.array(optionSchema),
    displayOrder: z.number(),
    calculated: z.boolean(),
    externalOptions: z.boolean(),
    hasUniqueValue: z.boolean(),
    hidden: z.boolean(),
    hubspotDefined: z.boolean(),
    showCurrencySymbol: z.boolean(),
    modificationMetadata: z.object({
        archivable: z.boolean(),
        readOnlyDefinition: z.boolean(),
        readOnlyValue: z.boolean()
    }),
    formField: z.boolean(),
    dataSensitivity: z.string()
});

export const propertyResponseSchema = z.object({
    result: propertySchema
});

export const customPropertyOptionSchema = z.object({
    hidden: z.boolean(),
    displayOrder: z.number().optional(),
    description: z.string().optional(),
    label: z.string(),
    value: z.string()
});

export const customPropertySchema = z.object({
    hidden: z.boolean().optional(),
    displayOrder: z.number().optional(),
    description: z.string().optional(),
    label: z.string(),
    type: z.string(),
    formField: z.boolean().optional(),
    groupName: z.string(),
    referencedObjectType: z.string().optional(),
    name: z.string(),
    options: z.array(customPropertyOptionSchema).optional(),
    calculationFormula: z.string().optional(),
    hasUniqueValue: z.boolean().optional(),
    fieldType: z.string(),
    externalOptions: z.boolean().optional()
});

export const createPropertyInputSchema = z.object({
    objectType: z.string(),
    data: customPropertySchema
});

export const createdPropertySchema = z.object({
    createdUserId: z.string(),
    hidden: z.boolean(),
    modificationMetadata: z.object({
        readOnlyOptions: z.boolean().optional(),
        readOnlyValue: z.boolean(),
        readOnlyDefinition: z.boolean(),
        archivable: z.boolean()
    }),
    displayOrder: z.number(),
    description: z.string(),
    showCurrencySymbol: z.boolean().optional(),
    label: z.string(),
    type: z.string(),
    hubspotDefined: z.boolean().optional(),
    formField: z.boolean(),
    dataSensitivity: z.string().optional(),
    createdAt: z.string(),
    archivedAt: z.string().optional(),
    archived: z.boolean(),
    groupName: z.string(),
    referencedObjectType: z.string().optional(),
    name: z.string(),
    options: z.array(
        z.object({
            hidden: z.boolean(),
            displayOrder: z.number(),
            description: z.string(),
            label: z.string(),
            value: z.string()
        })
    ),
    calculationFormula: z.string().optional(),
    hasUniqueValue: z.boolean(),
    fieldType: z.string(),
    updatedUserId: z.string(),
    calculated: z.boolean(),
    externalOptions: z.boolean(),
    updatedAt: z.string()
});

export const roleSchema = z.object({
    requiresBillingWrite: z.boolean(),
    name: z.string(),
    id: z.string()
});

export const roleResponseSchema = z.object({
    results: z.array(roleSchema)
});

export const userRoleInputSchema = z.object({
    id: z.string(),
    firstName: z.string().optional(),
    lastName: z.string().optional(),
    primaryTeamId: z.string().optional()
});

export const createdUserSchema = z.object({
    id: z.string(),
    firstName: z.string(),
    lastName: z.string(),
    primaryTeamId: z.string().optional(),
    email: z.string(),
    sendWelcomeEmail: z.boolean(),
    roleIds: z.array(z.string()),
    secondaryTeamIds: z.array(z.string()),
    superAdmin: z.boolean()
});

export const changedRoleResponseSchema = z.object({
    id: z.string(),
    firstName: z.string().optional(),
    lastName: z.string().optional(),
    primaryTeamId: z.string().optional(),
    email: z.string(),
    sendWelcomeEmail: z.boolean().optional(),
    roleIds: z.array(z.string()),
    secondaryTeamIds: z.array(z.string()).optional(),
    superAdmin: z.boolean()
});

export const hubspotServiceTicketSchema = z.object({
    id: z.number(),
    createdAt: z.date(),
    updatedAt: z.date(),
    isArchived: z.boolean(),
    subject: z.string(),
    content: z.string(),
    objectId: z.number(),
    ownerId: z.number(),
    pipeline: z.number(),
    pipelineStage: z.number(),
    ticketCategory: z.string().nullable(),
    ticketPriority: z.string()
});

export const hubspotOwnerSchema = z.object({
    id: z.number(),
    email: z.string(),
    firstName: z.string(),
    lastName: z.string(),
    userId: z.number(),
    createdAt: z.date(),
    updatedAt: z.date(),
    archived: z.boolean()
});

export const userSchema = z.object({
    id: z.string(),
    email: z.string(),
    firstName: z.string(),
    lastName: z.string(),
    roleIds: z.array(z.string()),
    primaryTeamId: z.union([z.string(), z.undefined()]).optional(),
    superAdmin: z.boolean()
});

export const createUserSchema = z.object({
    firstName: z.string().optional(),
    lastName: z.string().optional(),
    primaryTeamId: z.string().optional(),
    email: z.string(),
    sendWelcomeEmail: z.boolean().optional(),
    roleId: z.string().optional(),
    secondaryTeamIds: z.array(z.string()).optional()
});

export const hubspotKnowledgeBaseSchema = z.object({
    id: z.string(),
    title: z.string(),
    description: z.string(),
    category: z.string(),
    content: z.string(),
    publishDate: z.number()
});

export const createContactInputSchema = z.object({
    first_name: z.union([z.string(), z.undefined()]).optional(),
    last_name: z.union([z.string(), z.undefined()]).optional(),
    email: z.union([z.string(), z.undefined()]).optional(),
    job_title: z.union([z.string(), z.undefined()]).optional(),
    lead_status: z.union([z.string(), z.undefined()]).optional(),
    lifecycle_stage: z.union([z.string(), z.undefined()]).optional(),
    salutation: z.union([z.string(), z.undefined()]).optional(),
    mobile_phone_number: z.union([z.string(), z.undefined()]).optional(),
    website_url: z.union([z.string(), z.undefined()]).optional(),
    owner: z.union([z.string(), z.undefined()]).optional()
});

export const createUpdateContactOutputSchema = z.object({
    id: z.string(),
    created_date: z.string(),
    first_name: z.union([z.string(), z.undefined()]).optional(),
    last_name: z.union([z.string(), z.undefined()]).optional(),
    email: z.union([z.string(), z.undefined()]).optional(),
    job_title: z.union([z.string(), z.undefined()]).optional(),
    last_contacted: z.union([z.string(), z.undefined()]).optional(),
    last_activity_date: z.union([z.string(), z.undefined()]).optional(),
    lead_status: z.union([z.string(), z.undefined()]).optional(),
    lifecycle_stage: z.union([z.string(), z.undefined()]).optional(),
    salutation: z.union([z.string(), z.undefined()]).optional(),
    mobile_phone_number: z.union([z.string(), z.undefined()]).optional(),
    website_url: z.union([z.string(), z.undefined()]).optional(),
    owner: z.union([z.string(), z.undefined()]).optional()
});

export const updateContactInputSchema = z.object({
    first_name: z.union([z.string(), z.undefined()]).optional(),
    last_name: z.union([z.string(), z.undefined()]).optional(),
    email: z.union([z.string(), z.undefined()]).optional(),
    job_title: z.union([z.string(), z.undefined()]).optional(),
    lead_status: z.union([z.string(), z.undefined()]).optional(),
    lifecycle_stage: z.union([z.string(), z.undefined()]).optional(),
    salutation: z.union([z.string(), z.undefined()]).optional(),
    mobile_phone_number: z.union([z.string(), z.undefined()]).optional(),
    website_url: z.union([z.string(), z.undefined()]).optional(),
    owner: z.union([z.string(), z.undefined()]).optional(),
    id: z.string()
});

export const contactSchema = z.object({
    id: z.string(),
    created_date: z.string(),
    first_name: z.string().nullable(),
    last_name: z.string().nullable(),
    email: z.string().nullable(),
    job_title: z.string().nullable(),
    last_contacted: z.string().nullable(),
    last_activity_date: z.string().nullable(),
    lead_status: z.string().nullable(),
    lifecycle_stage: z.string().nullable(),
    salutation: z.string().nullable(),
    mobile_phone_number: z.string().nullable(),
    website_url: z.string().nullable(),
    owner: z.string().nullable()
});

export const currencyCodeSchema = z.object({
    id: z.string(),
    code: z.string(),
    description: z.string()
});

export const createCompanyInputSchema = z.object({
    name: z.union([z.string(), z.undefined()]).optional(),
    industry: z.union([z.string(), z.undefined()]).optional(),
    description: z.union([z.string(), z.undefined()]).optional(),
    country: z.union([z.string(), z.undefined()]).optional(),
    city: z.union([z.string(), z.undefined()]).optional(),
    lead_status: z.union([z.string(), z.undefined()]).optional(),
    lifecycle_stage: z.union([z.string(), z.undefined()]).optional(),
    owner: z.union([z.string(), z.undefined()]).optional(),
    year_founded: z.union([z.string(), z.undefined()]).optional(),
    website_url: z.union([z.string(), z.undefined()]).optional()
});

export const updateCompanyInputSchema = z.object({
    id: z.string(),
    name: z.union([z.string(), z.undefined()]).optional(),
    industry: z.union([z.string(), z.undefined()]).optional(),
    description: z.union([z.string(), z.undefined()]).optional(),
    country: z.union([z.string(), z.undefined()]).optional(),
    city: z.union([z.string(), z.undefined()]).optional(),
    lead_status: z.union([z.string(), z.undefined()]).optional(),
    lifecycle_stage: z.union([z.string(), z.undefined()]).optional(),
    owner: z.union([z.string(), z.undefined()]).optional(),
    year_founded: z.union([z.string(), z.undefined()]).optional(),
    website_url: z.union([z.string(), z.undefined()]).optional()
});

export const createUpdateCompanyOutputSchema = z.object({
    id: z.string(),
    created_date: z.string(),
    name: z.union([z.string(), z.undefined()]).optional(),
    industry: z.union([z.string(), z.undefined()]).optional(),
    description: z.union([z.string(), z.undefined()]).optional(),
    country: z.union([z.string(), z.undefined()]).optional(),
    city: z.union([z.string(), z.undefined()]).optional(),
    lead_status: z.union([z.string(), z.undefined()]).optional(),
    lifecycle_stage: z.union([z.string(), z.undefined()]).optional(),
    owner: z.union([z.string(), z.undefined()]).optional(),
    year_founded: z.union([z.string(), z.undefined()]).optional(),
    website_url: z.union([z.string(), z.undefined()]).optional()
});

export const companySchema = z.object({
    id: z.string(),
    created_date: z.string().nullable(),
    name: z.string().nullable(),
    industry: z.string().nullable(),
    description: z.string().nullable(),
    country: z.string().nullable(),
    city: z.string().nullable(),
    lead_status: z.string().nullable(),
    lifecycle_stage: z.string().nullable(),
    owner: z.string().nullable(),
    year_founded: z.string().nullable(),
    website_url: z.string().nullable()
});

export const accountSchema = z.object({
    id: z.string(),
    type: z.string(),
    timeZone: z.string(),
    companyCurrency: z.string(),
    additionalCurrencies: z.array(z.string()),
    utcOffset: z.string(),
    utcOffsetMilliseconds: z.number(),
    uiDomain: z.string(),
    dataHostingLocation: z.string()
});

export const associationTypesSchema = z.object({
    association_category: z.string(),
    association_type_Id: z.number()
});

export const associationSchema = z.object({
    to: z.number(),
    types: z.array(associationTypesSchema)
});

export const createTaskInputSchema = z.object({
    task_type: z.union([z.string(), z.undefined()]).optional(),
    title: z.union([z.string(), z.undefined()]).optional(),
    priority: z.union([z.string(), z.undefined()]).optional(),
    assigned_to: z.union([z.string(), z.undefined()]).optional(),
    due_date: z.union([z.string(), z.undefined()]).optional(),
    notes: z.union([z.string(), z.undefined()]).optional(),
    associations: z.union([z.array(associationSchema), z.undefined()]).optional()
});

export const updateTaskInputSchema = z.object({
    id: z.string(),
    task_type: z.union([z.string(), z.undefined()]).optional(),
    title: z.union([z.string(), z.undefined()]).optional(),
    priority: z.union([z.string(), z.undefined()]).optional(),
    assigned_to: z.union([z.string(), z.undefined()]).optional(),
    due_date: z.union([z.string(), z.undefined()]).optional(),
    notes: z.union([z.string(), z.undefined()]).optional(),
    associations: z.union([z.array(associationSchema), z.undefined()]).optional()
});

export const createUpdateTaskOutputSchema = z.object({
    id: z.string(),
    task_type: z.union([z.string(), z.undefined()]).optional(),
    title: z.union([z.string(), z.undefined()]).optional(),
    priority: z.union([z.string(), z.undefined()]).optional(),
    assigned_to: z.union([z.string(), z.undefined()]).optional(),
    due_date: z.union([z.string(), z.undefined()]).optional(),
    notes: z.union([z.string(), z.undefined()]).optional(),
    associations: z.union([z.array(associationSchema), z.undefined()]).optional()
});

export const associationCompanySchema = z.object({
    id: z.string(),
    name: z.string().nullable()
});

export const associationContactSchema = z.object({
    id: z.string(),
    first_name: z.string().nullable(),
    last_name: z.string().nullable()
});

export const associationDealSchema = z.object({
    id: z.string(),
    name: z.string().nullable()
});

export const returnedAssociationsSchema = z.object({
    companies: z.union([z.array(associationCompanySchema), z.undefined()]).optional(),
    contacts: z.union([z.array(associationContactSchema), z.undefined()]).optional(),
    deals: z.union([z.array(associationDealSchema), z.undefined()]).optional()
});

export const taskSchema = z.object({
    id: z.string(),
    task_type: z.string().nullable(),
    title: z.string().nullable(),
    priority: z.string().nullable(),
    assigned_to: z.string().nullable(),
    due_date: z.string().nullable(),
    notes: z.string().nullable(),
    returned_associations: z.union([returnedAssociationsSchema, z.undefined()]).optional()
});

export const createDealInputSchema = z.object({
    name: z.union([z.string(), z.undefined()]).optional(),
    amount: z.union([z.string(), z.undefined()]).optional(),
    close_date: z.union([z.string(), z.undefined()]).optional(),
    deal_description: z.union([z.string(), z.undefined()]).optional(),
    owner: z.union([z.string(), z.undefined()]).optional(),
    deal_stage: z.union([z.string(), z.undefined()]).optional(),
    deal_probability: z.union([z.string(), z.undefined()]).optional(),
    associations: z.union([z.array(associationSchema), z.undefined()]).optional()
});

export const updateDealInputSchema = z.object({
    id: z.string(),
    name: z.union([z.string(), z.undefined()]).optional(),
    amount: z.union([z.string(), z.undefined()]).optional(),
    close_date: z.union([z.string(), z.undefined()]).optional(),
    deal_description: z.union([z.string(), z.undefined()]).optional(),
    owner: z.union([z.string(), z.undefined()]).optional(),
    deal_stage: z.union([z.string(), z.undefined()]).optional(),
    deal_probability: z.union([z.string(), z.undefined()]).optional(),
    associations: z.union([z.array(associationSchema), z.undefined()]).optional()
});

export const createUpdateDealOutputSchema = z.object({
    id: z.string(),
    name: z.union([z.string(), z.undefined()]).optional(),
    amount: z.union([z.string(), z.undefined()]).optional(),
    close_date: z.union([z.string(), z.undefined()]).optional(),
    deal_description: z.union([z.string(), z.undefined()]).optional(),
    owner: z.union([z.string(), z.undefined()]).optional(),
    deal_stage: z.union([z.string(), z.undefined()]).optional(),
    deal_probability: z.union([z.string(), z.undefined()]).optional()
});

export const dealSchema = z.object({
    id: z.string(),
    name: z.string().nullable(),
    amount: z.string().nullable(),
    close_date: z.string().nullable(),
    deal_description: z.string().nullable(),
    owner: z.string().nullable(),
    deal_stage: z.string().nullable(),
    deal_probability: z.string().nullable(),
    returned_associations: z.union([returnedAssociationsSchema, z.undefined()]).optional()
});

export const noteSchema = z.object({
    id: z.union([z.string(), z.undefined()]).optional(),
    time_stamp: z.string(),
    created_date: z.union([z.string(), z.undefined()]).optional(),
    body: z.union([z.string(), z.undefined()]).optional(),
    attachment_ids: z.union([z.string(), z.undefined()]).optional(),
    owner: z.union([z.string(), z.undefined()]).optional(),
    associations: z.union([z.array(associationSchema), z.undefined()]).optional()
});

export const lineItemDefaultPropertiesSchema = z.object({
    name: z.string(),
    price: z.string(),
    quantity: z.string(),
    recurringbillingfrequency: z.number().nullable(),
    tax: z.number().nullable(),
    amount: z.string(),
    createdate: z.string(),
    description: z.string(),
    discount: z.number().nullable()
});

export const lineItemSchema = z.record(z.any()).and(
    z.object({
        name: z.string(),
        price: z.string(),
        quantity: z.string(),
        recurringbillingfrequency: z.number().nullable(),
        tax: z.number().nullable(),
        amount: z.string(),
        createdate: z.string(),
        description: z.string(),
        discount: z.number().nullable(),
        id: z.string()
    })
);

export const customObjectSchema = z.record(z.any()).and(
    z.object({
        id: z.string()
    })
);

export const productSchema = z.object({
    updatedAt: z.string(),
    createdAt: z.string(),
    id: z.string(),
    amount: z.number().nullable(),
    description: z.string().nullable(),
    discount: z.number().nullable(),
    sku: z.string().nullable(),
    url: z.string().nullable(),
    name: z.string(),
    price: z.string(),
    quantity: z.number().nullable(),
    recurringBillingFrequency: z.number().nullable(),
    tax: z.number().nullable()
});

export const stageSchema = z.object({
    updatedAt: z.string(),
    createdAt: z.string(),
    label: z.string(),
    displayOrder: z.number(),
    metadata: z.object({
        isClosed: z.boolean(),
        probability: z.string()
    }),
    id: z.string(),
    archived: z.boolean(),
    writePermissions: z.string()
});

export const pipelineSchema = z.object({
    updatedAt: z.string(),
    createdAt: z.string(),
    label: z.string(),
    displayOrder: z.number(),
    id: z.string(),
    archived: z.boolean(),
    stages: z.array(stageSchema)
});

export const pipelineOutputSchema = z.object({
    pipelines: z.array(pipelineSchema)
});
