// ---------------------------
// This file was generated by Nango (v0.64.1)
// You can version this file
// ---------------------------

export interface SyncMetadata_lever_opportunities {
};

export interface LeverOpportunity {
  id: string;
  name: string;
  headline: string;
  contact: string;
  emails: string[];
  phones: string[];
  confidentiality: string;
  location: string;
  links: string[];
  archived: {  reason: string;
  archivedAt: number;};
  createdAt: number;
  updatedAt: number;
  lastInteractionAt: number;
  lastAdvancedAt: number;
  snoozedUntil: number;
  archivedAt: number;
  archiveReason: string;
  stage: string;
  stageChanges: string[];
  owner: string;
  tags: string[];
  sources: string[];
  origin: string;
  sourcedBy: string;
  applications: string[];
  resume: string;
  followers: string[];
  urls: {  list: string;
  show: string;};
  dataProtection: {};
  isAnonymized: boolean;
  opportunityLocation: string;
};

export interface SyncMetadata_lever_opportunitiesapplications {
};

export interface LeverOpportunityApplication {
  id: string;
  opportunityId: string;
  candidateId: string;
  createdAt: number;
  type: string;
  posting: string;
  postingHiringManager: string;
  postingOwner: string;
  user: string;
  name: string;
  email: string;
  phone: {  type: string;
  value: string;};
  requisitionForHire: {  id: string;
  requisitionCode: string;
  hiringManagerOnHire: string;};
  ownerId: string;
  hiringManager: string;
  company: string;
  links: string[];
  comments: string;
  customQuestions: string[];
  archived: {  reason: string;
  archivedAt: number;};
};

export interface SyncMetadata_lever_opportunitiesfeedbacks {
};

export interface LeverOpportunityFeedback {
  id: string;
  type: string;
  text: string;
  instructions: string;
  fields: string[];
  baseTemplateId: string;
  interview: string;
  panel: string;
  user: string;
  createdAt: number;
  completedAt: number;
  updatedAt: number;
  deletedAt: number;
};

export interface SyncMetadata_lever_opportunitiesinterviews {
};

export interface LeverOpportunityInterview {
  id: string;
  panel: string;
  subject: string;
  note: string;
  interviewers: string[];
  timezone: string;
  createdAt: number;
  date: number;
  duration: number;
  location: string;
  feedbackTemplate: string;
  feedbackForms: string[];
  feedbackReminder: string;
  user: string;
  stage: string;
  canceledAt: number;
  postings: string[];
  gcalEventUrl: string;
};

export interface SyncMetadata_lever_opportunitiesnotes {
};

export interface LeverOpportunityNote {
  id: string;
  text: string;
  fields: string[];
  user: string;
  secret: boolean;
  completedAt: number;
  createdAt: number;
  deletedAt: number;
};

export interface SyncMetadata_lever_opportunitiesoffers {
};

export interface LeverOpportunityOffer {
  id: string;
  createdAt: number;
  status: string;
  creator: string;
  fields: string[];
  sentDocument: {  fileName: string;
  uploadedAt: number;
  downloadUrl: string;};
  signedDocument: {  fileName: string;
  uploadedAt: number;
  downloadUrl: string;};
};

export interface SyncMetadata_lever_postings {
};

export interface LeverPosting {
  perform_as: string;
  id: string;
  text: string;
  createdAt: number;
  updatedAt: number;
  user: string;
  owner: string;
  hiringManager: string;
  confidentiality: string;
  categories: {  team: string;
  department: string;
  location: string;
  allLocations: string[];
  commitment: string;
  level: string;};
  content: {  description: string;
  descriptionHtml: string;
  lists: string[];
  closing: string;
  closingHtml: string;};
  country: string;
  followers: string[];
  tags: string[];
  state: string;
  distributionChannels: string[];
  reqCode: string;
  requisitionCodes: string[];
  salaryDescription: string;
  salaryDescriptionHtml: string;
  salaryRange: {  max: number;
  min: number;
  currency: string;
  interval: string;};
  urls: {  list: string;
  show: string;
  apply: string;};
  workplaceType: string;
};

export interface SyncMetadata_lever_postingsquestions {
};

export interface LeverPostingApply {
  id: string;
  text: string;
  customQuestions: string[];
  eeoQuestions: string[];
  personalInformation: string[];
  urls: string[];
};

export interface SyncMetadata_lever_stages {
};

export interface LeverStage {
  id: string;
  text: string;
};

export interface ActionInput_lever_createnote {
  opportunityId: string;
  perform_as: string;
  note_id: string;
  value: string;
  secret: boolean;
  score: number;
  notifyFollowers: boolean;
  createdAt: number;
};

export interface ActionOutput_lever_createnote {
  id: string;
  text: string;
  fields: string[];
  user: string;
  secret: boolean;
  completedAt: number;
  createdAt: number;
  deletedAt: number;
};

export interface ActionInput_lever_createopportunity {
  perform_as: string;
  parse: boolean;
  perform_as_posting_owner: boolean;
  name: string;
  headline: string;
  stage: string;
  location: string;
  phones: (string | string)[];
  emails: string;
  links: string[];
  tags: string[];
  sources: string[];
  origin: string;
  owner: string;
  followers: string[];
  postings: string[];
  createdAt: number;
  archived: {  archivedAt: number;
  reason: string;};
  contact: string[];
};

export interface ActionOutput_lever_createopportunity {
  id: string;
  name: string;
  headline: string;
  contact: string;
  emails: string[];
  phones: string[];
  confidentiality: string;
  location: string;
  links: string[];
  archived: {  reason: string;
  archivedAt: number;};
  createdAt: number;
  updatedAt: number;
  lastInteractionAt: number;
  lastAdvancedAt: number;
  snoozedUntil: number;
  archivedAt: number;
  archiveReason: string;
  stage: string;
  stageChanges: string[];
  owner: string;
  tags: string[];
  sources: string[];
  origin: string;
  sourcedBy: string;
  applications: string[];
  resume: string;
  followers: string[];
  urls: {  list: string;
  show: string;};
  dataProtection: {};
  isAnonymized: boolean;
  opportunityLocation: string;
};

/** @deprecated It is recommended to use a Model */
export type ActionInput_lever_getstages = void

export interface ActionOutput_lever_getstages {
  stages: (string | string)[];
};

/** @deprecated It is recommended to use a Model */
export type ActionInput_lever_users = void

export interface ActionOutput_lever_users {
  users: (string | string | string | string | string | string | null | number | string | null | string | null | string[] | null | string | null | string | null)[];
};

/** @deprecated It is recommended to use a Model */
export type ActionInput_lever_getpostings = void

export interface ActionOutput_lever_getpostings {
  success: boolean;
  opportunityId: string;
  response: {  id: string;
  name: string;
  headline: string;
  contact: string;
  emails: string[];
  phones: string[];
  confidentiality: string;
  location: string;
  links: string[];
  archived: {  reason: string;
  archivedAt: number;};
  createdAt: number;
  updatedAt: number;
  lastInteractionAt: number;
  lastAdvancedAt: number;
  snoozedUntil: number;
  archivedAt: number;
  archiveReason: string;
  stage: string;
  stageChanges: string[];
  owner: string;
  tags: string[];
  sources: string[];
  origin: string;
  sourcedBy: string;
  applications: string[];
  resume: string;
  followers: string[];
  urls: {  list: string;
  show: string;};
  dataProtection: {};
  isAnonymized: boolean;
  opportunityLocation: string;};
};

/** @deprecated It is recommended to use a Model */
export type ActionInput_lever_getarchivereasons = void

export interface ActionOutput_lever_getarchivereasons {
  success: boolean;
  opportunityId: string;
  response: {  id: string;
  name: string;
  headline: string;
  contact: string;
  emails: string[];
  phones: string[];
  confidentiality: string;
  location: string;
  links: string[];
  archived: {  reason: string;
  archivedAt: number;};
  createdAt: number;
  updatedAt: number;
  lastInteractionAt: number;
  lastAdvancedAt: number;
  snoozedUntil: number;
  archivedAt: number;
  archiveReason: string;
  stage: string;
  stageChanges: string[];
  owner: string;
  tags: string[];
  sources: string[];
  origin: string;
  sourcedBy: string;
  applications: string[];
  resume: string;
  followers: string[];
  urls: {  list: string;
  show: string;};
  dataProtection: {};
  isAnonymized: boolean;
  opportunityLocation: string;};
};

export interface ActionInput_lever_getposting {
  id: string;
};

export interface ActionOutput_lever_getposting {
  success: boolean;
  opportunityId: string;
  response: {  id: string;
  name: string;
  headline: string;
  contact: string;
  emails: string[];
  phones: string[];
  confidentiality: string;
  location: string;
  links: string[];
  archived: {  reason: string;
  archivedAt: number;};
  createdAt: number;
  updatedAt: number;
  lastInteractionAt: number;
  lastAdvancedAt: number;
  snoozedUntil: number;
  archivedAt: number;
  archiveReason: string;
  stage: string;
  stageChanges: string[];
  owner: string;
  tags: string[];
  sources: string[];
  origin: string;
  sourcedBy: string;
  applications: string[];
  resume: string;
  followers: string[];
  urls: {  list: string;
  show: string;};
  dataProtection: {};
  isAnonymized: boolean;
  opportunityLocation: string;};
};

export interface ActionInput_lever_updateopportunitylinks {
  perform_as: string;
  links: string[];
  opportunityId: string;
  delete: boolean;
};

export interface ActionOutput_lever_updateopportunitylinks {
  success: boolean;
  opportunityId: string;
  response: {  id: string;
  name: string;
  headline: string;
  contact: string;
  emails: string[];
  phones: string[];
  confidentiality: string;
  location: string;
  links: string[];
  archived: {  reason: string;
  archivedAt: number;};
  createdAt: number;
  updatedAt: number;
  lastInteractionAt: number;
  lastAdvancedAt: number;
  snoozedUntil: number;
  archivedAt: number;
  archiveReason: string;
  stage: string;
  stageChanges: string[];
  owner: string;
  tags: string[];
  sources: string[];
  origin: string;
  sourcedBy: string;
  applications: string[];
  resume: string;
  followers: string[];
  urls: {  list: string;
  show: string;};
  dataProtection: {};
  isAnonymized: boolean;
  opportunityLocation: string;};
};

export interface ActionInput_lever_updateopportunitysources {
  opportunityId: string;
  perform_as: string;
  sources: string[];
  delete: boolean;
};

export interface ActionOutput_lever_updateopportunitysources {
  success: boolean;
  opportunityId: string;
  response: {  id: string;
  name: string;
  headline: string;
  contact: string;
  emails: string[];
  phones: string[];
  confidentiality: string;
  location: string;
  links: string[];
  archived: {  reason: string;
  archivedAt: number;};
  createdAt: number;
  updatedAt: number;
  lastInteractionAt: number;
  lastAdvancedAt: number;
  snoozedUntil: number;
  archivedAt: number;
  archiveReason: string;
  stage: string;
  stageChanges: string[];
  owner: string;
  tags: string[];
  sources: string[];
  origin: string;
  sourcedBy: string;
  applications: string[];
  resume: string;
  followers: string[];
  urls: {  list: string;
  show: string;};
  dataProtection: {};
  isAnonymized: boolean;
  opportunityLocation: string;};
};

export interface ActionInput_lever_updateopportunitystage {
  perform_as: string;
  stage: string;
  opportunityId: string;
};

export interface ActionOutput_lever_updateopportunitystage {
  success: boolean;
  opportunityId: string;
  response: {  id: string;
  name: string;
  headline: string;
  contact: string;
  emails: string[];
  phones: string[];
  confidentiality: string;
  location: string;
  links: string[];
  archived: {  reason: string;
  archivedAt: number;};
  createdAt: number;
  updatedAt: number;
  lastInteractionAt: number;
  lastAdvancedAt: number;
  snoozedUntil: number;
  archivedAt: number;
  archiveReason: string;
  stage: string;
  stageChanges: string[];
  owner: string;
  tags: string[];
  sources: string[];
  origin: string;
  sourcedBy: string;
  applications: string[];
  resume: string;
  followers: string[];
  urls: {  list: string;
  show: string;};
  dataProtection: {};
  isAnonymized: boolean;
  opportunityLocation: string;};
};

export interface ActionInput_lever_updateopportunitytags {
  opportunityId: string;
  perform_as: string;
  tags: string[];
  delete: boolean;
};

export interface ActionOutput_lever_updateopportunitytags {
  success: boolean;
  opportunityId: string;
  response: {  id: string;
  name: string;
  headline: string;
  contact: string;
  emails: string[];
  phones: string[];
  confidentiality: string;
  location: string;
  links: string[];
  archived: {  reason: string;
  archivedAt: number;};
  createdAt: number;
  updatedAt: number;
  lastInteractionAt: number;
  lastAdvancedAt: number;
  snoozedUntil: number;
  archivedAt: number;
  archiveReason: string;
  stage: string;
  stageChanges: string[];
  owner: string;
  tags: string[];
  sources: string[];
  origin: string;
  sourcedBy: string;
  applications: string[];
  resume: string;
  followers: string[];
  urls: {  list: string;
  show: string;};
  dataProtection: {};
  isAnonymized: boolean;
  opportunityLocation: string;};
};

export interface ActionInput_lever_updateopportunityarchived {
  perform_as: string;
  reason: string;
  requisitionId: string;
  opportunityId: string;
  cleanInterviews: boolean;
};

export interface ActionOutput_lever_updateopportunityarchived {
  success: boolean;
  opportunityId: string;
  response: {  id: string;
  name: string;
  headline: string;
  contact: string;
  emails: string[];
  phones: string[];
  confidentiality: string;
  location: string;
  links: string[];
  archived: {  reason: string;
  archivedAt: number;};
  createdAt: number;
  updatedAt: number;
  lastInteractionAt: number;
  lastAdvancedAt: number;
  snoozedUntil: number;
  archivedAt: number;
  archiveReason: string;
  stage: string;
  stageChanges: string[];
  owner: string;
  tags: string[];
  sources: string[];
  origin: string;
  sourcedBy: string;
  applications: string[];
  resume: string;
  followers: string[];
  urls: {  list: string;
  show: string;};
  dataProtection: {};
  isAnonymized: boolean;
  opportunityLocation: string;};
};

export interface ActionInput_lever_applyposting {
  postId: string;
  send_confirmation_email: boolean;
  personalInformation: (string | string)[];
  eeoResponses: {};
  urls: (string | string)[];
  CustomQuestions: (string | (string)[])[];
  ipAddress: string;
  source: string;
  consent: {  marketing: {  provided: boolean;
  compliancePolicyId: string;};
  store: {  provided: boolean;
  compliancePolicyId: string;};};
  diversitySurvey: {  surveyId: string;
  candidateSelectedLocation: string;
  responses: (string | string | string | string)[];};
  origin: string;
};

export interface ActionOutput_lever_applyposting {
  success: boolean;
  opportunityId: string;
  response: {  id: string;
  name: string;
  headline: string;
  contact: string;
  emails: string[];
  phones: string[];
  confidentiality: string;
  location: string;
  links: string[];
  archived: {  reason: string;
  archivedAt: number;};
  createdAt: number;
  updatedAt: number;
  lastInteractionAt: number;
  lastAdvancedAt: number;
  snoozedUntil: number;
  archivedAt: number;
  archiveReason: string;
  stage: string;
  stageChanges: string[];
  owner: string;
  tags: string[];
  sources: string[];
  origin: string;
  sourcedBy: string;
  applications: string[];
  resume: string;
  followers: string[];
  urls: {  list: string;
  show: string;};
  dataProtection: {};
  isAnonymized: boolean;
  opportunityLocation: string;};
};

export interface ActionInput_lever_updateopportunity {
  opportunityId: string;
  perform_as: string;
  delete: boolean;
  links: string[];
  sources: string[];
  stage: string;
  tags: string[];
  reason: string;
  cleanInterviews: boolean;
  requisitionId: string;
};

export interface ActionOutput_lever_updateopportunity {
  data: {  id: string;
  name: string;
  headline: string;
  contact: string;
  emails: string[];
  phones: string[];
  confidentiality: string;
  location: string;
  links: string[];
  archived: {  reason: string;
  archivedAt: number;};
  createdAt: number;
  updatedAt: number;
  lastInteractionAt: number;
  lastAdvancedAt: number;
  snoozedUntil: number | null;
  archivedAt: number;
  archiveReason: string;
  stage: string;
  stageChanges: ({  toStageId: string;
  toStageIndex: number;
  updatedAt: number;
  userId: string;} | string)[];
  owner: string;
  tags: string[];
  sources: string[];
  origin: string;
  sourcedBy: string;
  applications: string[];
  resume: string;
  followers: string[];
  urls: {  list: string;
  show: string;};
  dataProtection: {} | null;
  isAnonymized: boolean;
  opportunityLocation: string;};
};
