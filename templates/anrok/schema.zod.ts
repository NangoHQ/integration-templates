// Generated by ts-to-zod
import { z } from 'zod';

export const anrokAddressSchema = z.object({
    line1: z.string(),
    city: z.string(),
    postalCode: z.string(),
    country: z.string()
});

export const anrokLineItemsSchema = z.object({
    id: z.string(),
    productExternalId: z.string(),
    amount: z.number()
});

export const anrokTaxIdsSchema = z.object({
    type: z.string(),
    value: z.string()
});

export const anrokTransactionDataSchema = z.object({
    id: z.union([z.string(), z.undefined()]).optional(),
    accountingDate: z.string(),
    currencyCode: z.string(),
    customerId: z.string(),
    customerName: z.string(),
    customerAddress: anrokAddressSchema,
    lineItems: z.array(anrokLineItemsSchema),
    customerTaxIds: z.array(anrokTaxIdsSchema).optional()
});

export const anrokContactSchema = z.object({
    external_id: z.string(),
    name: z.string(),
    address_line_1: z.string(),
    city: z.string(),
    zip: z.string(),
    country: z.string(),
    taxable: z.boolean(),
    tax_number: z.string()
});

export const baseTransactionSchema = z.object({
    id: z.union([z.string(), z.undefined()]).optional(),
    issuing_date: z.string(),
    currency: z.string(),
    contact: anrokContactSchema
});

export const transactionFeeSchema = z.object({
    item_id: z.string(),
    item_code: z.string().nullable(),
    amount_cents: z.number().nullable()
});

export const transactionSchema = z.object({
    id: z.union([z.string(), z.undefined()]).optional(),
    issuing_date: z.string(),
    currency: z.string(),
    contact: anrokContactSchema,
    fees: z.array(transactionFeeSchema)
});

export const taxBreakdownSchema = z.object({
    name: z.string().optional(),
    rate: z.string().optional(),
    tax_amount: z.number().optional(),
    type: z.string().optional().nullable(),
    reason: z.string().optional()
});

export const failedTransactionSchema = z.object({
    id: z.union([z.string(), z.undefined()]).optional(),
    issuing_date: z.string(),
    currency: z.string(),
    contact: anrokContactSchema,
    fees: z.array(transactionFeeSchema),
    validation_errors: z.any()
});

export const successTransactionSchema = z.object({
    id: z.union([z.string(), z.undefined()]).optional(),
    issuing_date: z.string(),
    currency: z.string(),
    contact: anrokContactSchema,
    fees: z.array(transactionFeeSchema),
    sub_total_excluding_taxes: z.number().optional(),
    taxes_amount_cents: z.number().optional()
});

export const transactionActionResponseSchema = z.object({
    succeeded: z.array(successTransactionSchema),
    failed: z.array(failedTransactionSchema)
});

export const transactionToNegateSchema = z.object({
    id: z.string(),
    voided_id: z.string()
});

export const transactionToDeleteSchema = z.object({
    id: z.string()
});

export const failedTransactionToNegateSchema = z.object({
    id: z.string(),
    voided_id: z.string(),
    validation_errors: z.any()
});

export const transactionNegationActionResponseSchema = z.object({
    succeeded: z.array(transactionToNegateSchema),
    failed: z.array(failedTransactionToNegateSchema)
});

export const failedTransactionToDeleteSchema = z.object({
    id: z.string(),
    validation_errors: z.any()
});

export const transactionDeletionActionResponseSchema = z.object({
    succeeded: z.array(transactionToDeleteSchema),
    failed: z.array(failedTransactionToDeleteSchema)
});

export const transactionFeeWithTaxBreakdownSchema = z.object({
    item_id: z.string(),
    item_code: z.string().nullable(),
    amount_cents: z.number().nullable(),
    tax_amount_cents: z.number(),
    tax_breakdown: z.array(taxBreakdownSchema)
});

export const anonymousAnrokActionCreateorupdatetransactionInputSchema = z.array(transactionSchema);

export const anonymousAnrokActionVoidtransactionInputSchema = z.array(transactionToDeleteSchema);

export const anonymousAnrokActionNegatetransactionInputSchema = z.array(transactionToNegateSchema);
