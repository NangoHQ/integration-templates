// Generated by ts-to-zod
import { z } from 'zod';

export const customerSchema = z.object({
    id: z.string(),
    phone_number: z.string().nullable(),
    first_name: z.string().nullable(),
    last_name: z.string().nullable(),
    subscriptions: z.array(
        z.object({
            type: z.string(),
            name: z.string(),
            start_date: z.string(),
            end_date: z.string().nullable()
        })
    )
});

export const externalCustomerIdSchema = z.object({
    ecommerce: z.string()
});

export const upsertRechargeCustomerInputSchema = z.object({
    email: z.string(),
    external_customer_id: z.union([externalCustomerIdSchema, z.undefined()]).optional(),
    first_name: z.string(),
    last_name: z.string(),
    phone: z.union([z.string(), z.undefined()]).optional(),
    tax_exempt: z.union([z.boolean(), z.undefined()]).optional()
});

export const upsertRechargeCustomerOutputSchema = z.object({
    action: z.union([z.literal('update'), z.literal('create')]),
    response: z.object({
        accepts_marketing: z.number().nullable(),
        analytics_data: z.object({
            utm_params: z.array(
                z.object({
                    utm_campaign: z.union([z.string(), z.undefined()]).optional(),
                    utm_content: z.union([z.string(), z.undefined()]).optional(),
                    utm_data_source: z.union([z.string(), z.undefined()]).optional(),
                    utm_source: z.union([z.string(), z.undefined()]).optional(),
                    utm_medium: z.union([z.string(), z.undefined()]).optional(),
                    utm_term: z.union([z.string(), z.undefined()]).optional(),
                    utm_timestamp: z.union([z.string(), z.undefined()]).optional()
                })
            )
        }),
        billing_address1: z.string().nullable(),
        billing_address2: z.string().nullable(),
        billing_city: z.string().nullable(),
        billing_company: z.string().nullable(),
        billing_country: z.string().nullable(),
        billing_phone: z.string().nullable(),
        billing_province: z.string().nullable(),
        billing_zip: z.string().nullable(),
        created_at: z.string(),
        email: z.string(),
        first_charge_processed_at: z.string().nullable(),
        first_name: z.string(),
        has_card_error_in_dunning: z.boolean(),
        has_valid_payment_method: z.boolean(),
        hash: z.string(),
        id: z.number(),
        last_name: z.string(),
        number_active_subscriptions: z.number(),
        number_subscriptions: z.number(),
        phone: z.string().nullable(),
        processor_type: z.string().nullable(),
        reason_payment_method_not_valid: z.string().nullable(),
        shopify_customer_id: z.string().nullable(),
        status: z.string(),
        tax_exempt: z.boolean(),
        updated_at: z.string(),
        apply_credit_to_next_recurring_charge: z.union([z.boolean(), z.undefined()]).optional(),
        external_customer_id: z.union([externalCustomerIdSchema, z.undefined()]).optional(),
        has_payment_method_in_dunning: z.union([z.boolean(), z.undefined()]).optional(),
        subscriptions_active_count: z.union([z.number(), z.undefined()]).optional(),
        subscriptions_total_count: z.union([z.number(), z.undefined()]).optional(),
        subscription_related_charge_streak: z.union([z.number(), z.undefined()]).optional()
    })
});
