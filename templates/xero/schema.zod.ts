// Generated by ts-to-zod
import { z } from 'zod';

export const actionErrorResponseSchema = z.object({
    message: z.string()
});

export const baseContactSchema = z.object({
    name: z.string()
});

export const createContactSchema = z.object({
    name: z.string(),
    external_id: z.string().optional(),
    email: z.string().optional(),
    tax_number: z.string().optional(),
    address_line_1: z.string().optional(),
    address_line_2: z.string().optional(),
    city: z.string().optional(),
    zip: z.string().optional(),
    country: z.string().optional(),
    state: z.string().optional(),
    phone: z.string().optional()
});

export const contactSchema = z.object({
    name: z.string(),
    id: z.string(),
    external_id: z.string().nullable(),
    email: z.string().nullable(),
    tax_number: z.string().nullable(),
    address_line_1: z.string().optional().nullable(),
    address_line_2: z.string().optional().nullable(),
    city: z.string().nullable(),
    zip: z.string().nullable(),
    country: z.string().nullable(),
    state: z.string().nullable(),
    phone: z.string().nullable(),
    subsidiary: z.string().optional().nullable()
});

export const failedContactSchema = z.object({
    name: z.string(),
    id: z.string(),
    external_id: z.string().nullable(),
    email: z.string().nullable(),
    tax_number: z.string().nullable(),
    address_line_1: z.string().optional().nullable(),
    address_line_2: z.string().optional().nullable(),
    city: z.string().nullable(),
    zip: z.string().nullable(),
    country: z.string().nullable(),
    state: z.string().nullable(),
    phone: z.string().nullable(),
    subsidiary: z.string().optional().nullable(),
    validation_errors: z.array(z.any())
});

export const contactActionResponseSchema = z.object({
    succeededContacts: z.array(contactSchema),
    failedContacts: z.array(failedContactSchema)
});

export const accountSchema = z.object({
    id: z.string(),
    code: z.string().optional(),
    name: z.string(),
    type: z.string(),
    tax_type: z.string(),
    description: z.string().nullable(),
    class: z.string(),
    bank_account_type: z.string(),
    reporting_code: z.string(),
    reporting_code_name: z.string(),
    currency_code: z.string().optional()
});

export const itemSchema = z.object({
    id: z.string(),
    item_code: z.string().nullable(),
    name: z.string(),
    description: z.string().nullable(),
    account_code: z.string().nullable()
});

export const failedItemSchema = z.object({
    id: z.string(),
    item_code: z.string().nullable(),
    name: z.string(),
    description: z.string().nullable(),
    account_code: z.string().nullable(),
    validation_errors: z.array(z.any())
});

export const itemActionResponseSchema = z.object({
    succeededItems: z.array(itemSchema),
    failedItems: z.array(failedItemSchema)
});

export const basePaymentSchema = z.object({
    date: z.string().nullable(),
    amount_cents: z.number(),
    external_contact_id: z.string().optional(),
    account_code: z.string().optional(),
    account_id: z.string().optional()
});

export const createPaymentSchema = z.object({
    date: z.string().nullable(),
    amount_cents: z.number(),
    external_contact_id: z.string().optional(),
    account_code: z.string().optional(),
    account_id: z.string().optional(),
    status: z.string().optional(),
    invoice_id: z.string().optional(),
    credit_note_id: z.string().optional()
});

export const paymentSchema = z.object({
    date: z.string().nullable(),
    amount_cents: z.number(),
    external_contact_id: z.string().optional(),
    account_code: z.string().optional(),
    account_id: z.string().optional(),
    id: z.string(),
    status: z.string(),
    invoice_id: z.string().nullable(),
    credit_note_id: z.string().nullable()
});

export const failedPaymentSchema = z.object({
    date: z.string().nullable(),
    amount_cents: z.number(),
    external_contact_id: z.string().optional(),
    account_code: z.string().optional(),
    account_id: z.string().optional(),
    id: z.string(),
    status: z.string(),
    invoice_id: z.string().nullable(),
    credit_note_id: z.string().nullable(),
    validation_errors: z.array(z.any())
});

export const idEntitySchema = z.object({
    id: z.string()
});

export const statusOutputSchema = z.object({
    status: z.string()
});

export const paymentActionResponseSchema = z.object({
    succeededPayment: z.array(paymentSchema),
    failedPayments: z.array(failedPaymentSchema)
});

export const baseInvoiceSchema = z.object({
    type: z.union([z.literal('ACCPAY'), z.literal('ACCREC')]),
    external_contact_id: z.string(),
    url: z.string().optional()
});

export const baseInvoiceFeeSchema = z.object({
    account_code: z.string().optional(),
    item_code: z.string().optional().nullable(),
    account_external_id: z.string().optional().nullable(),
    discount_amount_cents: z.number().optional().nullable(),
    discount_rate: z.number().optional().nullable()
});

export const createInvoiceFeeSchema = z.object({
    account_code: z.string().optional(),
    item_code: z.string().optional().nullable(),
    account_external_id: z.string().optional().nullable(),
    discount_amount_cents: z.number().optional().nullable(),
    discount_rate: z.number().optional().nullable(),
    item_id: z.string().optional(),
    description: z.string(),
    units: z.number().optional(),
    precise_unit_amount: z.number().optional().nullable(),
    amount_cents: z.number().optional().nullable(),
    taxes_amount_cents: z.number().optional().nullable()
});

export const createInvoiceSchema = z.object({
    type: z.union([z.literal('ACCPAY'), z.literal('ACCREC')]),
    external_contact_id: z.string(),
    url: z.string().optional(),
    fees: z.array(createInvoiceFeeSchema),
    issuing_date: z.date().optional(),
    payment_due_date: z.date().optional().nullable(),
    status: z.string().optional(),
    number: z.string().optional(),
    currency: z.string().optional(),
    purchase_order: z.string().optional().nullable()
});

export const invoiceFeeSchema = z.object({
    account_code: z.string().optional(),
    item_code: z.string().optional().nullable(),
    account_external_id: z.string().optional().nullable(),
    discount_amount_cents: z.number().optional().nullable(),
    discount_rate: z.number().optional().nullable(),
    item_id: z.string(),
    description: z.string().nullable(),
    units: z.number().nullable(),
    precise_unit_amount: z.number().nullable(),
    amount_cents: z.number().nullable(),
    taxes_amount_cents: z.number().nullable()
});

export const invoiceSchema = z.object({
    type: z.union([z.literal('ACCPAY'), z.literal('ACCREC')]),
    external_contact_id: z.string(),
    url: z.string().optional(),
    id: z.string(),
    issuing_date: z.string().nullable(),
    payment_due_date: z.string().nullable(),
    status: z.string(),
    number: z.string().optional(),
    currency: z.string(),
    purchase_order: z.string().nullable(),
    fees: z.array(invoiceFeeSchema)
});

export const updateInvoiceFeeSchema = z.object({
    account_code: z.string().optional(),
    item_code: z.string().optional().nullable(),
    account_external_id: z.string().optional().nullable(),
    discount_amount_cents: z.number().optional().nullable(),
    discount_rate: z.number().optional().nullable(),
    item_id: z.string().optional(),
    description: z.string().optional().nullable(),
    units: z.number().optional().nullable(),
    precise_unit_amount: z.number().optional().nullable(),
    amount_cents: z.number().optional().nullable(),
    taxes_amount_cents: z.number().optional().nullable()
});

export const updateInvoiceSchema = z.object({
    type: z.union([z.literal('ACCPAY'), z.literal('ACCREC')]).optional(),
    external_contact_id: z.string().optional(),
    url: z.string().optional(),
    id: z.string(),
    issuing_date: z.string().optional().nullable(),
    payment_due_date: z.string().optional().nullable(),
    status: z.string().optional(),
    number: z.string().optional(),
    currency: z.string().optional(),
    purchase_order: z.string().optional().nullable(),
    fees: z.array(updateInvoiceFeeSchema).optional()
});

export const failedInvoiceSchema = z.object({
    type: z.union([z.literal('ACCPAY'), z.literal('ACCREC')]),
    external_contact_id: z.string(),
    url: z.string().optional(),
    id: z.string(),
    issuing_date: z.string().nullable(),
    payment_due_date: z.string().nullable(),
    status: z.string(),
    number: z.string().optional(),
    currency: z.string(),
    purchase_order: z.string().nullable(),
    fees: z.array(invoiceFeeSchema),
    validation_errors: z.array(z.any())
});

export const invoiceActionResponseSchema = z.object({
    succeededInvoices: z.array(invoiceSchema),
    failedInvoices: z.array(failedInvoiceSchema)
});

export const creditNoteFeeSchema = z.object({
    item_id: z.string(),
    item_code: z.string().optional().nullable(),
    description: z.string().optional().nullable(),
    units: z.number().optional().nullable(),
    precise_unit_amount: z.number().optional().nullable(),
    account_code: z.string().optional().nullable(),
    account_external_id: z.string().optional().nullable(),
    amount_cents: z.number().optional().nullable(),
    taxes_amount_cents: z.number().optional().nullable()
});

export const creditNoteSchema = z.object({
    id: z.string(),
    type: z.string(),
    external_contact_id: z.string(),
    status: z.string(),
    number: z.string(),
    is_taxable: z.boolean().optional(),
    tax_rate_id: z.string().optional(),
    tax_rate: z.number().optional(),
    currency: z.string(),
    reference: z.string(),
    issuing_date: z.string().nullable(),
    fees: z.array(creditNoteFeeSchema)
});

export const failedCreditNoteSchema = z.object({
    id: z.string(),
    type: z.string(),
    external_contact_id: z.string(),
    status: z.string(),
    number: z.string(),
    is_taxable: z.boolean().optional(),
    tax_rate_id: z.string().optional(),
    tax_rate: z.number().optional(),
    currency: z.string(),
    reference: z.string(),
    issuing_date: z.string().nullable(),
    fees: z.array(creditNoteFeeSchema),
    validation_errors: z.array(z.any())
});

export const creditNoteActionResponseSchema = z.object({
    succeededCreditNotes: z.array(creditNoteSchema),
    failedCreditNotes: z.array(failedCreditNoteSchema)
});

export const tenantSchema = z.object({
    id: z.string(),
    authEventId: z.string(),
    tenantId: z.string(),
    tenantType: z.string(),
    tenantName: z.string(),
    createdDateUtc: z.string(),
    updatedDateUtc: z.string()
});

export const tenantResponseSchema = z.object({
    tenants: z.array(tenantSchema)
});

export const trackingCategorySchema = z.object({
    name: z.string(),
    option: z.string(),
    trackingCategoryId: z.string(),
    trackingOptionId: z.string(),
    options: z.array(z.string())
});

export const ledgerLineSchema = z.object({
    journalLineId: z.string(),
    accountId: z.string(),
    accountCode: z.string(),
    accountName: z.string(),
    description: z.union([z.string(), z.undefined()]).optional(),
    netAmount: z.number(),
    grossAmount: z.number(),
    taxAmount: z.number(),
    taxType: z.union([z.string(), z.undefined()]).optional(),
    taxName: z.union([z.string(), z.undefined()]).optional(),
    trackingCategories: z.array(trackingCategorySchema)
});

export const generalLedgerSchema = z.object({
    id: z.string(),
    date: z.string().nullable(),
    number: z.number(),
    reference: z.string().nullable(),
    sourceId: z.string().nullable(),
    sourceType: z.string().nullable(),
    createdDate: z.string().nullable(),
    lines: z.array(ledgerLineSchema)
});

export const bankTransactionLineItemSchema = z.object({
    description: z.string(),
    quantity: z.number(),
    unit_amount: z.number(),
    account_code: z.string(),
    item_code: z.string().nullable(),
    line_item_id: z.string(),
    tax_type: z.string().nullable(),
    tax_amount: z.number(),
    line_amount: z.number(),
    tracking: z.array(trackingCategorySchema).nullable()
});

export const bankTransactionSchema = z.object({
    id: z.string(),
    type: z.string(),
    bank_account_id: z.string(),
    bank_account_code: z.string(),
    bank_account_name: z.string(),
    contact_id: z.string(),
    contact_name: z.string(),
    date: z.string().nullable(),
    status: z.string(),
    reference: z.string().nullable(),
    is_reconciled: z.boolean(),
    currency_code: z.string(),
    currency_rate: z.number().nullable(),
    total: z.number(),
    sub_total: z.number(),
    total_tax: z.number(),
    line_amount_types: z.string(),
    line_items: z.array(bankTransactionLineItemSchema),
    updated_date: z.string().nullable(),
    url: z.string().nullable(),
    has_attachments: z.boolean()
});

export const addressSchema = z.object({
    addressType: z.string().optional(),
    addressLine1: z.string().optional(),
    addressLine2: z.string().optional(),
    addressLine3: z.string().optional(),
    addressLine4: z.string().optional(),
    city: z.string().optional(),
    region: z.string().optional(),
    postalCode: z.string().optional(),
    country: z.string().optional(),
    attentionTo: z.string().optional()
});

export const phoneSchema = z.object({
    phoneType: z.string().optional(),
    phoneNumber: z.string().optional(),
    phoneAreaCode: z.string().optional(),
    phoneCountryCode: z.string().optional()
});

export const externalLinkSchema = z.object({
    linkType: z.string().optional(),
    url: z.string().optional()
});

export const paymentTermDetailsSchema = z.object({
    day: z.number().optional(),
    type: z.string().optional()
});

export const paymentTermsSchema = z.object({
    bills: paymentTermDetailsSchema.optional(),
    sales: paymentTermDetailsSchema.optional()
});

export const organisationSchema = z.object({
    id: z.string(),
    apiKey: z.string().optional(),
    name: z.string(),
    legalName: z.string(),
    paysTax: z.boolean(),
    version: z.string(),
    organisationType: z.string(),
    baseCurrency: z.string(),
    countryCode: z.string(),
    isDemoCompany: z.boolean(),
    organisationStatus: z.string(),
    registrationNumber: z.string().optional(),
    employerIdentificationNumber: z.string().optional(),
    taxNumber: z.string().optional(),
    financialYearEndDay: z.number().optional(),
    financialYearEndMonth: z.number().optional(),
    salesTaxBasis: z.string().optional(),
    salesTaxPeriod: z.string().optional(),
    defaultSalesTax: z.string().optional(),
    defaultPurchasesTax: z.string().optional(),
    periodLockDate: z.string().optional(),
    endOfYearLockDate: z.string().optional(),
    createdDateUTC: z.string().optional(),
    timezone: z.string().optional(),
    organisationEntityType: z.string().optional(),
    shortCode: z.string().optional(),
    edition: z.string().optional(),
    class: z.string().optional(),
    lineOfBusiness: z.string().optional(),
    addresses: z.array(addressSchema).optional(),
    phones: z.array(phoneSchema).optional(),
    externalLinks: z.array(externalLinkSchema).optional(),
    paymentTerms: paymentTermsSchema.optional()
});

export const anonymousXeroActionCreatecontactInputSchema = z.array(createContactSchema);

export const anonymousXeroActionUpdatecontactInputSchema = z.array(contactSchema);

export const anonymousXeroActionCreateinvoiceInputSchema = z.array(createInvoiceSchema);

export const anonymousXeroActionUpdateinvoiceInputSchema = z.array(updateInvoiceSchema);

export const anonymousXeroActionCreatecreditnoteInputSchema = z.array(creditNoteSchema);

export const anonymousXeroActionUpdatecreditnoteInputSchema = z.array(creditNoteSchema);

export const anonymousXeroActionCreatepaymentInputSchema = z.array(createPaymentSchema);

export const anonymousXeroActionCreateitemInputSchema = z.array(itemSchema);

export const anonymousXeroActionUpdateitemInputSchema = z.array(itemSchema);
